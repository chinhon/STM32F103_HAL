
IC_OC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002290  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800239c  0800239c  0001239c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023c0  080023c0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080023c0  080023c0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080023c0  080023c0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023c0  080023c0  000123c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080023c4  080023c4  000123c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080023c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  080023d4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  080023d4  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007c35  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001329  00000000  00000000  00027c6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000938  00000000  00000000  00028f98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000890  00000000  00000000  000298d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016539  00000000  00000000  0002a160  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006f09  00000000  00000000  00040699  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00083dd0  00000000  00000000  000475a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cb372  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002604  00000000  00000000  000cb3f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002384 	.word	0x08002384

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002384 	.word	0x08002384

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fa62 	bl	8000618 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f807 	bl	8000166 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f926 	bl	80003a8 <MX_GPIO_Init>
  MX_TIM2_Init();
 800015c:	f000 f83e 	bl	80001dc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000160:	f000 f8ac 	bl	80002bc <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000164:	e7fe      	b.n	8000164 <main+0x18>

08000166 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000166:	b580      	push	{r7, lr}
 8000168:	b090      	sub	sp, #64	; 0x40
 800016a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800016c:	f107 0318 	add.w	r3, r7, #24
 8000170:	2228      	movs	r2, #40	; 0x28
 8000172:	2100      	movs	r1, #0
 8000174:	4618      	mov	r0, r3
 8000176:	f002 f8fd 	bl	8002374 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800017a:	1d3b      	adds	r3, r7, #4
 800017c:	2200      	movs	r2, #0
 800017e:	601a      	str	r2, [r3, #0]
 8000180:	605a      	str	r2, [r3, #4]
 8000182:	609a      	str	r2, [r3, #8]
 8000184:	60da      	str	r2, [r3, #12]
 8000186:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000188:	2302      	movs	r3, #2
 800018a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800018c:	2301      	movs	r3, #1
 800018e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000190:	2310      	movs	r3, #16
 8000192:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000194:	2300      	movs	r3, #0
 8000196:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000198:	f107 0318 	add.w	r3, r7, #24
 800019c:	4618      	mov	r0, r3
 800019e:	f000 fd05 	bl	8000bac <HAL_RCC_OscConfig>
 80001a2:	4603      	mov	r3, r0
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d001      	beq.n	80001ac <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001a8:	f000 f914 	bl	80003d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ac:	230f      	movs	r3, #15
 80001ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001b0:	2300      	movs	r3, #0
 80001b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001b4:	2300      	movs	r3, #0
 80001b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001b8:	2300      	movs	r3, #0
 80001ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001bc:	2300      	movs	r3, #0
 80001be:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001c0:	1d3b      	adds	r3, r7, #4
 80001c2:	2100      	movs	r1, #0
 80001c4:	4618      	mov	r0, r3
 80001c6:	f000 ff71 	bl	80010ac <HAL_RCC_ClockConfig>
 80001ca:	4603      	mov	r3, r0
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d001      	beq.n	80001d4 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80001d0:	f000 f900 	bl	80003d4 <Error_Handler>
  }
}
 80001d4:	bf00      	nop
 80001d6:	3740      	adds	r7, #64	; 0x40
 80001d8:	46bd      	mov	sp, r7
 80001da:	bd80      	pop	{r7, pc}

080001dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b08a      	sub	sp, #40	; 0x28
 80001e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80001e2:	f107 0318 	add.w	r3, r7, #24
 80001e6:	2200      	movs	r2, #0
 80001e8:	601a      	str	r2, [r3, #0]
 80001ea:	605a      	str	r2, [r3, #4]
 80001ec:	609a      	str	r2, [r3, #8]
 80001ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80001f0:	f107 0310 	add.w	r3, r7, #16
 80001f4:	2200      	movs	r2, #0
 80001f6:	601a      	str	r2, [r3, #0]
 80001f8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80001fa:	463b      	mov	r3, r7
 80001fc:	2200      	movs	r2, #0
 80001fe:	601a      	str	r2, [r3, #0]
 8000200:	605a      	str	r2, [r3, #4]
 8000202:	609a      	str	r2, [r3, #8]
 8000204:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000206:	4b2c      	ldr	r3, [pc, #176]	; (80002b8 <MX_TIM2_Init+0xdc>)
 8000208:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800020c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000;
 800020e:	4b2a      	ldr	r3, [pc, #168]	; (80002b8 <MX_TIM2_Init+0xdc>)
 8000210:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000214:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000216:	4b28      	ldr	r3, [pc, #160]	; (80002b8 <MX_TIM2_Init+0xdc>)
 8000218:	2200      	movs	r2, #0
 800021a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800021c:	4b26      	ldr	r3, [pc, #152]	; (80002b8 <MX_TIM2_Init+0xdc>)
 800021e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000222:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000224:	4b24      	ldr	r3, [pc, #144]	; (80002b8 <MX_TIM2_Init+0xdc>)
 8000226:	2200      	movs	r2, #0
 8000228:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800022a:	4b23      	ldr	r3, [pc, #140]	; (80002b8 <MX_TIM2_Init+0xdc>)
 800022c:	2280      	movs	r2, #128	; 0x80
 800022e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000230:	4821      	ldr	r0, [pc, #132]	; (80002b8 <MX_TIM2_Init+0xdc>)
 8000232:	f001 f8a5 	bl	8001380 <HAL_TIM_Base_Init>
 8000236:	4603      	mov	r3, r0
 8000238:	2b00      	cmp	r3, #0
 800023a:	d001      	beq.n	8000240 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 800023c:	f000 f8ca 	bl	80003d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000240:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000244:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000246:	f107 0318 	add.w	r3, r7, #24
 800024a:	4619      	mov	r1, r3
 800024c:	481a      	ldr	r0, [pc, #104]	; (80002b8 <MX_TIM2_Init+0xdc>)
 800024e:	f001 fb8b 	bl	8001968 <HAL_TIM_ConfigClockSource>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d001      	beq.n	800025c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000258:	f000 f8bc 	bl	80003d4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800025c:	4816      	ldr	r0, [pc, #88]	; (80002b8 <MX_TIM2_Init+0xdc>)
 800025e:	f001 f936 	bl	80014ce <HAL_TIM_IC_Init>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000268:	f000 f8b4 	bl	80003d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800026c:	2300      	movs	r3, #0
 800026e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000270:	2300      	movs	r3, #0
 8000272:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000274:	f107 0310 	add.w	r3, r7, #16
 8000278:	4619      	mov	r1, r3
 800027a:	480f      	ldr	r0, [pc, #60]	; (80002b8 <MX_TIM2_Init+0xdc>)
 800027c:	f001 ffe6 	bl	800224c <HAL_TIMEx_MasterConfigSynchronization>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8000286:	f000 f8a5 	bl	80003d4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800028a:	2300      	movs	r3, #0
 800028c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800028e:	2301      	movs	r3, #1
 8000290:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000292:	2300      	movs	r3, #0
 8000294:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000296:	2300      	movs	r3, #0
 8000298:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800029a:	463b      	mov	r3, r7
 800029c:	2200      	movs	r2, #0
 800029e:	4619      	mov	r1, r3
 80002a0:	4805      	ldr	r0, [pc, #20]	; (80002b8 <MX_TIM2_Init+0xdc>)
 80002a2:	f001 facd 	bl	8001840 <HAL_TIM_IC_ConfigChannel>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 80002ac:	f000 f892 	bl	80003d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80002b0:	bf00      	nop
 80002b2:	3728      	adds	r7, #40	; 0x28
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	20000070 	.word	0x20000070

080002bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b08e      	sub	sp, #56	; 0x38
 80002c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002c6:	2200      	movs	r2, #0
 80002c8:	601a      	str	r2, [r3, #0]
 80002ca:	605a      	str	r2, [r3, #4]
 80002cc:	609a      	str	r2, [r3, #8]
 80002ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002d0:	f107 0320 	add.w	r3, r7, #32
 80002d4:	2200      	movs	r2, #0
 80002d6:	601a      	str	r2, [r3, #0]
 80002d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	2200      	movs	r2, #0
 80002de:	601a      	str	r2, [r3, #0]
 80002e0:	605a      	str	r2, [r3, #4]
 80002e2:	609a      	str	r2, [r3, #8]
 80002e4:	60da      	str	r2, [r3, #12]
 80002e6:	611a      	str	r2, [r3, #16]
 80002e8:	615a      	str	r2, [r3, #20]
 80002ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80002ec:	4b2c      	ldr	r3, [pc, #176]	; (80003a0 <MX_TIM3_Init+0xe4>)
 80002ee:	4a2d      	ldr	r2, [pc, #180]	; (80003a4 <MX_TIM3_Init+0xe8>)
 80002f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8000;
 80002f2:	4b2b      	ldr	r3, [pc, #172]	; (80003a0 <MX_TIM3_Init+0xe4>)
 80002f4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80002f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002fa:	4b29      	ldr	r3, [pc, #164]	; (80003a0 <MX_TIM3_Init+0xe4>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49;
 8000300:	4b27      	ldr	r3, [pc, #156]	; (80003a0 <MX_TIM3_Init+0xe4>)
 8000302:	2231      	movs	r2, #49	; 0x31
 8000304:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000306:	4b26      	ldr	r3, [pc, #152]	; (80003a0 <MX_TIM3_Init+0xe4>)
 8000308:	2200      	movs	r2, #0
 800030a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800030c:	4b24      	ldr	r3, [pc, #144]	; (80003a0 <MX_TIM3_Init+0xe4>)
 800030e:	2280      	movs	r2, #128	; 0x80
 8000310:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000312:	4823      	ldr	r0, [pc, #140]	; (80003a0 <MX_TIM3_Init+0xe4>)
 8000314:	f001 f834 	bl	8001380 <HAL_TIM_Base_Init>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800031e:	f000 f859 	bl	80003d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000322:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000326:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000328:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800032c:	4619      	mov	r1, r3
 800032e:	481c      	ldr	r0, [pc, #112]	; (80003a0 <MX_TIM3_Init+0xe4>)
 8000330:	f001 fb1a 	bl	8001968 <HAL_TIM_ConfigClockSource>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800033a:	f000 f84b 	bl	80003d4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800033e:	4818      	ldr	r0, [pc, #96]	; (80003a0 <MX_TIM3_Init+0xe4>)
 8000340:	f001 f86d 	bl	800141e <HAL_TIM_OC_Init>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800034a:	f000 f843 	bl	80003d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800034e:	2300      	movs	r3, #0
 8000350:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000352:	2300      	movs	r3, #0
 8000354:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000356:	f107 0320 	add.w	r3, r7, #32
 800035a:	4619      	mov	r1, r3
 800035c:	4810      	ldr	r0, [pc, #64]	; (80003a0 <MX_TIM3_Init+0xe4>)
 800035e:	f001 ff75 	bl	800224c <HAL_TIMEx_MasterConfigSynchronization>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000368:	f000 f834 	bl	80003d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800036c:	2330      	movs	r3, #48	; 0x30
 800036e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 24;
 8000370:	2318      	movs	r3, #24
 8000372:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000374:	2300      	movs	r3, #0
 8000376:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000378:	2300      	movs	r3, #0
 800037a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800037c:	1d3b      	adds	r3, r7, #4
 800037e:	2200      	movs	r2, #0
 8000380:	4619      	mov	r1, r3
 8000382:	4807      	ldr	r0, [pc, #28]	; (80003a0 <MX_TIM3_Init+0xe4>)
 8000384:	f001 fa04 	bl	8001790 <HAL_TIM_OC_ConfigChannel>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800038e:	f000 f821 	bl	80003d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000392:	4803      	ldr	r0, [pc, #12]	; (80003a0 <MX_TIM3_Init+0xe4>)
 8000394:	f000 f8ae 	bl	80004f4 <HAL_TIM_MspPostInit>

}
 8000398:	bf00      	nop
 800039a:	3738      	adds	r7, #56	; 0x38
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	20000028 	.word	0x20000028
 80003a4:	40000400 	.word	0x40000400

080003a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ae:	4b08      	ldr	r3, [pc, #32]	; (80003d0 <MX_GPIO_Init+0x28>)
 80003b0:	699b      	ldr	r3, [r3, #24]
 80003b2:	4a07      	ldr	r2, [pc, #28]	; (80003d0 <MX_GPIO_Init+0x28>)
 80003b4:	f043 0304 	orr.w	r3, r3, #4
 80003b8:	6193      	str	r3, [r2, #24]
 80003ba:	4b05      	ldr	r3, [pc, #20]	; (80003d0 <MX_GPIO_Init+0x28>)
 80003bc:	699b      	ldr	r3, [r3, #24]
 80003be:	f003 0304 	and.w	r3, r3, #4
 80003c2:	607b      	str	r3, [r7, #4]
 80003c4:	687b      	ldr	r3, [r7, #4]

}
 80003c6:	bf00      	nop
 80003c8:	370c      	adds	r7, #12
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bc80      	pop	{r7}
 80003ce:	4770      	bx	lr
 80003d0:	40021000 	.word	0x40021000

080003d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003d8:	bf00      	nop
 80003da:	46bd      	mov	sp, r7
 80003dc:	bc80      	pop	{r7}
 80003de:	4770      	bx	lr

080003e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b085      	sub	sp, #20
 80003e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003e6:	4b15      	ldr	r3, [pc, #84]	; (800043c <HAL_MspInit+0x5c>)
 80003e8:	699b      	ldr	r3, [r3, #24]
 80003ea:	4a14      	ldr	r2, [pc, #80]	; (800043c <HAL_MspInit+0x5c>)
 80003ec:	f043 0301 	orr.w	r3, r3, #1
 80003f0:	6193      	str	r3, [r2, #24]
 80003f2:	4b12      	ldr	r3, [pc, #72]	; (800043c <HAL_MspInit+0x5c>)
 80003f4:	699b      	ldr	r3, [r3, #24]
 80003f6:	f003 0301 	and.w	r3, r3, #1
 80003fa:	60bb      	str	r3, [r7, #8]
 80003fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003fe:	4b0f      	ldr	r3, [pc, #60]	; (800043c <HAL_MspInit+0x5c>)
 8000400:	69db      	ldr	r3, [r3, #28]
 8000402:	4a0e      	ldr	r2, [pc, #56]	; (800043c <HAL_MspInit+0x5c>)
 8000404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000408:	61d3      	str	r3, [r2, #28]
 800040a:	4b0c      	ldr	r3, [pc, #48]	; (800043c <HAL_MspInit+0x5c>)
 800040c:	69db      	ldr	r3, [r3, #28]
 800040e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000412:	607b      	str	r3, [r7, #4]
 8000414:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000416:	4b0a      	ldr	r3, [pc, #40]	; (8000440 <HAL_MspInit+0x60>)
 8000418:	685b      	ldr	r3, [r3, #4]
 800041a:	60fb      	str	r3, [r7, #12]
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000422:	60fb      	str	r3, [r7, #12]
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800042a:	60fb      	str	r3, [r7, #12]
 800042c:	4a04      	ldr	r2, [pc, #16]	; (8000440 <HAL_MspInit+0x60>)
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000432:	bf00      	nop
 8000434:	3714      	adds	r7, #20
 8000436:	46bd      	mov	sp, r7
 8000438:	bc80      	pop	{r7}
 800043a:	4770      	bx	lr
 800043c:	40021000 	.word	0x40021000
 8000440:	40010000 	.word	0x40010000

08000444 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b08a      	sub	sp, #40	; 0x28
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044c:	f107 0318 	add.w	r3, r7, #24
 8000450:	2200      	movs	r2, #0
 8000452:	601a      	str	r2, [r3, #0]
 8000454:	605a      	str	r2, [r3, #4]
 8000456:	609a      	str	r2, [r3, #8]
 8000458:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000462:	d12c      	bne.n	80004be <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000464:	4b20      	ldr	r3, [pc, #128]	; (80004e8 <HAL_TIM_Base_MspInit+0xa4>)
 8000466:	69db      	ldr	r3, [r3, #28]
 8000468:	4a1f      	ldr	r2, [pc, #124]	; (80004e8 <HAL_TIM_Base_MspInit+0xa4>)
 800046a:	f043 0301 	orr.w	r3, r3, #1
 800046e:	61d3      	str	r3, [r2, #28]
 8000470:	4b1d      	ldr	r3, [pc, #116]	; (80004e8 <HAL_TIM_Base_MspInit+0xa4>)
 8000472:	69db      	ldr	r3, [r3, #28]
 8000474:	f003 0301 	and.w	r3, r3, #1
 8000478:	617b      	str	r3, [r7, #20]
 800047a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800047c:	4b1a      	ldr	r3, [pc, #104]	; (80004e8 <HAL_TIM_Base_MspInit+0xa4>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	4a19      	ldr	r2, [pc, #100]	; (80004e8 <HAL_TIM_Base_MspInit+0xa4>)
 8000482:	f043 0304 	orr.w	r3, r3, #4
 8000486:	6193      	str	r3, [r2, #24]
 8000488:	4b17      	ldr	r3, [pc, #92]	; (80004e8 <HAL_TIM_Base_MspInit+0xa4>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	f003 0304 	and.w	r3, r3, #4
 8000490:	613b      	str	r3, [r7, #16]
 8000492:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000494:	2301      	movs	r3, #1
 8000496:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000498:	2300      	movs	r3, #0
 800049a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049c:	2300      	movs	r3, #0
 800049e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a0:	f107 0318 	add.w	r3, r7, #24
 80004a4:	4619      	mov	r1, r3
 80004a6:	4811      	ldr	r0, [pc, #68]	; (80004ec <HAL_TIM_Base_MspInit+0xa8>)
 80004a8:	f000 fa26 	bl	80008f8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80004ac:	2200      	movs	r2, #0
 80004ae:	2100      	movs	r1, #0
 80004b0:	201c      	movs	r0, #28
 80004b2:	f000 f9ea 	bl	800088a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80004b6:	201c      	movs	r0, #28
 80004b8:	f000 fa03 	bl	80008c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80004bc:	e010      	b.n	80004e0 <HAL_TIM_Base_MspInit+0x9c>
  else if(htim_base->Instance==TIM3)
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4a0b      	ldr	r2, [pc, #44]	; (80004f0 <HAL_TIM_Base_MspInit+0xac>)
 80004c4:	4293      	cmp	r3, r2
 80004c6:	d10b      	bne.n	80004e0 <HAL_TIM_Base_MspInit+0x9c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80004c8:	4b07      	ldr	r3, [pc, #28]	; (80004e8 <HAL_TIM_Base_MspInit+0xa4>)
 80004ca:	69db      	ldr	r3, [r3, #28]
 80004cc:	4a06      	ldr	r2, [pc, #24]	; (80004e8 <HAL_TIM_Base_MspInit+0xa4>)
 80004ce:	f043 0302 	orr.w	r3, r3, #2
 80004d2:	61d3      	str	r3, [r2, #28]
 80004d4:	4b04      	ldr	r3, [pc, #16]	; (80004e8 <HAL_TIM_Base_MspInit+0xa4>)
 80004d6:	69db      	ldr	r3, [r3, #28]
 80004d8:	f003 0302 	and.w	r3, r3, #2
 80004dc:	60fb      	str	r3, [r7, #12]
 80004de:	68fb      	ldr	r3, [r7, #12]
}
 80004e0:	bf00      	nop
 80004e2:	3728      	adds	r7, #40	; 0x28
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	40021000 	.word	0x40021000
 80004ec:	40010800 	.word	0x40010800
 80004f0:	40000400 	.word	0x40000400

080004f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b088      	sub	sp, #32
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fc:	f107 0310 	add.w	r3, r7, #16
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]
 8000504:	605a      	str	r2, [r3, #4]
 8000506:	609a      	str	r2, [r3, #8]
 8000508:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4a0f      	ldr	r2, [pc, #60]	; (800054c <HAL_TIM_MspPostInit+0x58>)
 8000510:	4293      	cmp	r3, r2
 8000512:	d117      	bne.n	8000544 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000514:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <HAL_TIM_MspPostInit+0x5c>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	4a0d      	ldr	r2, [pc, #52]	; (8000550 <HAL_TIM_MspPostInit+0x5c>)
 800051a:	f043 0304 	orr.w	r3, r3, #4
 800051e:	6193      	str	r3, [r2, #24]
 8000520:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <HAL_TIM_MspPostInit+0x5c>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	f003 0304 	and.w	r3, r3, #4
 8000528:	60fb      	str	r3, [r7, #12]
 800052a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800052c:	2340      	movs	r3, #64	; 0x40
 800052e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000530:	2302      	movs	r3, #2
 8000532:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000534:	2302      	movs	r3, #2
 8000536:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000538:	f107 0310 	add.w	r3, r7, #16
 800053c:	4619      	mov	r1, r3
 800053e:	4805      	ldr	r0, [pc, #20]	; (8000554 <HAL_TIM_MspPostInit+0x60>)
 8000540:	f000 f9da 	bl	80008f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000544:	bf00      	nop
 8000546:	3720      	adds	r7, #32
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	40000400 	.word	0x40000400
 8000550:	40021000 	.word	0x40021000
 8000554:	40010800 	.word	0x40010800

08000558 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr

08000564 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000568:	e7fe      	b.n	8000568 <HardFault_Handler+0x4>

0800056a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800056a:	b480      	push	{r7}
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800056e:	e7fe      	b.n	800056e <MemManage_Handler+0x4>

08000570 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000574:	e7fe      	b.n	8000574 <BusFault_Handler+0x4>

08000576 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000576:	b480      	push	{r7}
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800057a:	e7fe      	b.n	800057a <UsageFault_Handler+0x4>

0800057c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr

08000588 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr

08000594 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr

080005a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005a4:	f000 f87e 	bl	80006a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}

080005ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80005b0:	4802      	ldr	r0, [pc, #8]	; (80005bc <TIM2_IRQHandler+0x10>)
 80005b2:	f000 ffe4 	bl	800157e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000070 	.word	0x20000070

080005c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr

080005cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005cc:	480c      	ldr	r0, [pc, #48]	; (8000600 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80005ce:	490d      	ldr	r1, [pc, #52]	; (8000604 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80005d0:	4a0d      	ldr	r2, [pc, #52]	; (8000608 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80005d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005d4:	e002      	b.n	80005dc <LoopCopyDataInit>

080005d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005da:	3304      	adds	r3, #4

080005dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005e0:	d3f9      	bcc.n	80005d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005e2:	4a0a      	ldr	r2, [pc, #40]	; (800060c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80005e4:	4c0a      	ldr	r4, [pc, #40]	; (8000610 <LoopFillZerobss+0x22>)
  movs r3, #0
 80005e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005e8:	e001      	b.n	80005ee <LoopFillZerobss>

080005ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005ec:	3204      	adds	r2, #4

080005ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005f0:	d3fb      	bcc.n	80005ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005f2:	f7ff ffe5 	bl	80005c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005f6:	f001 fe99 	bl	800232c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005fa:	f7ff fda7 	bl	800014c <main>
  bx lr
 80005fe:	4770      	bx	lr
  ldr r0, =_sdata
 8000600:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000604:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000608:	080023c8 	.word	0x080023c8
  ldr r2, =_sbss
 800060c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000610:	200000bc 	.word	0x200000bc

08000614 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000614:	e7fe      	b.n	8000614 <ADC1_2_IRQHandler>
	...

08000618 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800061c:	4b08      	ldr	r3, [pc, #32]	; (8000640 <HAL_Init+0x28>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a07      	ldr	r2, [pc, #28]	; (8000640 <HAL_Init+0x28>)
 8000622:	f043 0310 	orr.w	r3, r3, #16
 8000626:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000628:	2003      	movs	r0, #3
 800062a:	f000 f923 	bl	8000874 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800062e:	2000      	movs	r0, #0
 8000630:	f000 f808 	bl	8000644 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000634:	f7ff fed4 	bl	80003e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000638:	2300      	movs	r3, #0
}
 800063a:	4618      	mov	r0, r3
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40022000 	.word	0x40022000

08000644 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800064c:	4b12      	ldr	r3, [pc, #72]	; (8000698 <HAL_InitTick+0x54>)
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	4b12      	ldr	r3, [pc, #72]	; (800069c <HAL_InitTick+0x58>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	4619      	mov	r1, r3
 8000656:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800065a:	fbb3 f3f1 	udiv	r3, r3, r1
 800065e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000662:	4618      	mov	r0, r3
 8000664:	f000 f93b 	bl	80008de <HAL_SYSTICK_Config>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800066e:	2301      	movs	r3, #1
 8000670:	e00e      	b.n	8000690 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	2b0f      	cmp	r3, #15
 8000676:	d80a      	bhi.n	800068e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000678:	2200      	movs	r2, #0
 800067a:	6879      	ldr	r1, [r7, #4]
 800067c:	f04f 30ff 	mov.w	r0, #4294967295
 8000680:	f000 f903 	bl	800088a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000684:	4a06      	ldr	r2, [pc, #24]	; (80006a0 <HAL_InitTick+0x5c>)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800068a:	2300      	movs	r3, #0
 800068c:	e000      	b.n	8000690 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800068e:	2301      	movs	r3, #1
}
 8000690:	4618      	mov	r0, r3
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20000000 	.word	0x20000000
 800069c:	20000008 	.word	0x20000008
 80006a0:	20000004 	.word	0x20000004

080006a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006a8:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <HAL_IncTick+0x1c>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	461a      	mov	r2, r3
 80006ae:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <HAL_IncTick+0x20>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4413      	add	r3, r2
 80006b4:	4a03      	ldr	r2, [pc, #12]	; (80006c4 <HAL_IncTick+0x20>)
 80006b6:	6013      	str	r3, [r2, #0]
}
 80006b8:	bf00      	nop
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr
 80006c0:	20000008 	.word	0x20000008
 80006c4:	200000b8 	.word	0x200000b8

080006c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  return uwTick;
 80006cc:	4b02      	ldr	r3, [pc, #8]	; (80006d8 <HAL_GetTick+0x10>)
 80006ce:	681b      	ldr	r3, [r3, #0]
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bc80      	pop	{r7}
 80006d6:	4770      	bx	lr
 80006d8:	200000b8 	.word	0x200000b8

080006dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006dc:	b480      	push	{r7}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f003 0307 	and.w	r3, r3, #7
 80006ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <__NVIC_SetPriorityGrouping+0x44>)
 80006ee:	68db      	ldr	r3, [r3, #12]
 80006f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006f2:	68ba      	ldr	r2, [r7, #8]
 80006f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006f8:	4013      	ands	r3, r2
 80006fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000704:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800070c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800070e:	4a04      	ldr	r2, [pc, #16]	; (8000720 <__NVIC_SetPriorityGrouping+0x44>)
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	60d3      	str	r3, [r2, #12]
}
 8000714:	bf00      	nop
 8000716:	3714      	adds	r7, #20
 8000718:	46bd      	mov	sp, r7
 800071a:	bc80      	pop	{r7}
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	e000ed00 	.word	0xe000ed00

08000724 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000728:	4b04      	ldr	r3, [pc, #16]	; (800073c <__NVIC_GetPriorityGrouping+0x18>)
 800072a:	68db      	ldr	r3, [r3, #12]
 800072c:	0a1b      	lsrs	r3, r3, #8
 800072e:	f003 0307 	and.w	r3, r3, #7
}
 8000732:	4618      	mov	r0, r3
 8000734:	46bd      	mov	sp, r7
 8000736:	bc80      	pop	{r7}
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	e000ed00 	.word	0xe000ed00

08000740 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800074a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074e:	2b00      	cmp	r3, #0
 8000750:	db0b      	blt.n	800076a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	f003 021f 	and.w	r2, r3, #31
 8000758:	4906      	ldr	r1, [pc, #24]	; (8000774 <__NVIC_EnableIRQ+0x34>)
 800075a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075e:	095b      	lsrs	r3, r3, #5
 8000760:	2001      	movs	r0, #1
 8000762:	fa00 f202 	lsl.w	r2, r0, r2
 8000766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800076a:	bf00      	nop
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	bc80      	pop	{r7}
 8000772:	4770      	bx	lr
 8000774:	e000e100 	.word	0xe000e100

08000778 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	6039      	str	r1, [r7, #0]
 8000782:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000788:	2b00      	cmp	r3, #0
 800078a:	db0a      	blt.n	80007a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	b2da      	uxtb	r2, r3
 8000790:	490c      	ldr	r1, [pc, #48]	; (80007c4 <__NVIC_SetPriority+0x4c>)
 8000792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000796:	0112      	lsls	r2, r2, #4
 8000798:	b2d2      	uxtb	r2, r2
 800079a:	440b      	add	r3, r1
 800079c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007a0:	e00a      	b.n	80007b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	b2da      	uxtb	r2, r3
 80007a6:	4908      	ldr	r1, [pc, #32]	; (80007c8 <__NVIC_SetPriority+0x50>)
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	f003 030f 	and.w	r3, r3, #15
 80007ae:	3b04      	subs	r3, #4
 80007b0:	0112      	lsls	r2, r2, #4
 80007b2:	b2d2      	uxtb	r2, r2
 80007b4:	440b      	add	r3, r1
 80007b6:	761a      	strb	r2, [r3, #24]
}
 80007b8:	bf00      	nop
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	e000e100 	.word	0xe000e100
 80007c8:	e000ed00 	.word	0xe000ed00

080007cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b089      	sub	sp, #36	; 0x24
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	60f8      	str	r0, [r7, #12]
 80007d4:	60b9      	str	r1, [r7, #8]
 80007d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	f003 0307 	and.w	r3, r3, #7
 80007de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007e0:	69fb      	ldr	r3, [r7, #28]
 80007e2:	f1c3 0307 	rsb	r3, r3, #7
 80007e6:	2b04      	cmp	r3, #4
 80007e8:	bf28      	it	cs
 80007ea:	2304      	movcs	r3, #4
 80007ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ee:	69fb      	ldr	r3, [r7, #28]
 80007f0:	3304      	adds	r3, #4
 80007f2:	2b06      	cmp	r3, #6
 80007f4:	d902      	bls.n	80007fc <NVIC_EncodePriority+0x30>
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	3b03      	subs	r3, #3
 80007fa:	e000      	b.n	80007fe <NVIC_EncodePriority+0x32>
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000800:	f04f 32ff 	mov.w	r2, #4294967295
 8000804:	69bb      	ldr	r3, [r7, #24]
 8000806:	fa02 f303 	lsl.w	r3, r2, r3
 800080a:	43da      	mvns	r2, r3
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	401a      	ands	r2, r3
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000814:	f04f 31ff 	mov.w	r1, #4294967295
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	fa01 f303 	lsl.w	r3, r1, r3
 800081e:	43d9      	mvns	r1, r3
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000824:	4313      	orrs	r3, r2
         );
}
 8000826:	4618      	mov	r0, r3
 8000828:	3724      	adds	r7, #36	; 0x24
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr

08000830 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	3b01      	subs	r3, #1
 800083c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000840:	d301      	bcc.n	8000846 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000842:	2301      	movs	r3, #1
 8000844:	e00f      	b.n	8000866 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000846:	4a0a      	ldr	r2, [pc, #40]	; (8000870 <SysTick_Config+0x40>)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	3b01      	subs	r3, #1
 800084c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800084e:	210f      	movs	r1, #15
 8000850:	f04f 30ff 	mov.w	r0, #4294967295
 8000854:	f7ff ff90 	bl	8000778 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000858:	4b05      	ldr	r3, [pc, #20]	; (8000870 <SysTick_Config+0x40>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800085e:	4b04      	ldr	r3, [pc, #16]	; (8000870 <SysTick_Config+0x40>)
 8000860:	2207      	movs	r2, #7
 8000862:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000864:	2300      	movs	r3, #0
}
 8000866:	4618      	mov	r0, r3
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	e000e010 	.word	0xe000e010

08000874 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800087c:	6878      	ldr	r0, [r7, #4]
 800087e:	f7ff ff2d 	bl	80006dc <__NVIC_SetPriorityGrouping>
}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800088a:	b580      	push	{r7, lr}
 800088c:	b086      	sub	sp, #24
 800088e:	af00      	add	r7, sp, #0
 8000890:	4603      	mov	r3, r0
 8000892:	60b9      	str	r1, [r7, #8]
 8000894:	607a      	str	r2, [r7, #4]
 8000896:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000898:	2300      	movs	r3, #0
 800089a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800089c:	f7ff ff42 	bl	8000724 <__NVIC_GetPriorityGrouping>
 80008a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	68b9      	ldr	r1, [r7, #8]
 80008a6:	6978      	ldr	r0, [r7, #20]
 80008a8:	f7ff ff90 	bl	80007cc <NVIC_EncodePriority>
 80008ac:	4602      	mov	r2, r0
 80008ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008b2:	4611      	mov	r1, r2
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff ff5f 	bl	8000778 <__NVIC_SetPriority>
}
 80008ba:	bf00      	nop
 80008bc:	3718      	adds	r7, #24
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b082      	sub	sp, #8
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	4603      	mov	r3, r0
 80008ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff ff35 	bl	8000740 <__NVIC_EnableIRQ>
}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	b082      	sub	sp, #8
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f7ff ffa2 	bl	8000830 <SysTick_Config>
 80008ec:	4603      	mov	r3, r0
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
	...

080008f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b08b      	sub	sp, #44	; 0x2c
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000906:	2300      	movs	r3, #0
 8000908:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800090a:	e127      	b.n	8000b5c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800090c:	2201      	movs	r2, #1
 800090e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000910:	fa02 f303 	lsl.w	r3, r2, r3
 8000914:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	69fa      	ldr	r2, [r7, #28]
 800091c:	4013      	ands	r3, r2
 800091e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000920:	69ba      	ldr	r2, [r7, #24]
 8000922:	69fb      	ldr	r3, [r7, #28]
 8000924:	429a      	cmp	r2, r3
 8000926:	f040 8116 	bne.w	8000b56 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	2b12      	cmp	r3, #18
 8000930:	d034      	beq.n	800099c <HAL_GPIO_Init+0xa4>
 8000932:	2b12      	cmp	r3, #18
 8000934:	d80d      	bhi.n	8000952 <HAL_GPIO_Init+0x5a>
 8000936:	2b02      	cmp	r3, #2
 8000938:	d02b      	beq.n	8000992 <HAL_GPIO_Init+0x9a>
 800093a:	2b02      	cmp	r3, #2
 800093c:	d804      	bhi.n	8000948 <HAL_GPIO_Init+0x50>
 800093e:	2b00      	cmp	r3, #0
 8000940:	d031      	beq.n	80009a6 <HAL_GPIO_Init+0xae>
 8000942:	2b01      	cmp	r3, #1
 8000944:	d01c      	beq.n	8000980 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000946:	e048      	b.n	80009da <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000948:	2b03      	cmp	r3, #3
 800094a:	d043      	beq.n	80009d4 <HAL_GPIO_Init+0xdc>
 800094c:	2b11      	cmp	r3, #17
 800094e:	d01b      	beq.n	8000988 <HAL_GPIO_Init+0x90>
          break;
 8000950:	e043      	b.n	80009da <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000952:	4a89      	ldr	r2, [pc, #548]	; (8000b78 <HAL_GPIO_Init+0x280>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d026      	beq.n	80009a6 <HAL_GPIO_Init+0xae>
 8000958:	4a87      	ldr	r2, [pc, #540]	; (8000b78 <HAL_GPIO_Init+0x280>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d806      	bhi.n	800096c <HAL_GPIO_Init+0x74>
 800095e:	4a87      	ldr	r2, [pc, #540]	; (8000b7c <HAL_GPIO_Init+0x284>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d020      	beq.n	80009a6 <HAL_GPIO_Init+0xae>
 8000964:	4a86      	ldr	r2, [pc, #536]	; (8000b80 <HAL_GPIO_Init+0x288>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d01d      	beq.n	80009a6 <HAL_GPIO_Init+0xae>
          break;
 800096a:	e036      	b.n	80009da <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800096c:	4a85      	ldr	r2, [pc, #532]	; (8000b84 <HAL_GPIO_Init+0x28c>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d019      	beq.n	80009a6 <HAL_GPIO_Init+0xae>
 8000972:	4a85      	ldr	r2, [pc, #532]	; (8000b88 <HAL_GPIO_Init+0x290>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d016      	beq.n	80009a6 <HAL_GPIO_Init+0xae>
 8000978:	4a84      	ldr	r2, [pc, #528]	; (8000b8c <HAL_GPIO_Init+0x294>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d013      	beq.n	80009a6 <HAL_GPIO_Init+0xae>
          break;
 800097e:	e02c      	b.n	80009da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	68db      	ldr	r3, [r3, #12]
 8000984:	623b      	str	r3, [r7, #32]
          break;
 8000986:	e028      	b.n	80009da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	68db      	ldr	r3, [r3, #12]
 800098c:	3304      	adds	r3, #4
 800098e:	623b      	str	r3, [r7, #32]
          break;
 8000990:	e023      	b.n	80009da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	68db      	ldr	r3, [r3, #12]
 8000996:	3308      	adds	r3, #8
 8000998:	623b      	str	r3, [r7, #32]
          break;
 800099a:	e01e      	b.n	80009da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	68db      	ldr	r3, [r3, #12]
 80009a0:	330c      	adds	r3, #12
 80009a2:	623b      	str	r3, [r7, #32]
          break;
 80009a4:	e019      	b.n	80009da <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	689b      	ldr	r3, [r3, #8]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d102      	bne.n	80009b4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009ae:	2304      	movs	r3, #4
 80009b0:	623b      	str	r3, [r7, #32]
          break;
 80009b2:	e012      	b.n	80009da <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	689b      	ldr	r3, [r3, #8]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d105      	bne.n	80009c8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009bc:	2308      	movs	r3, #8
 80009be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	69fa      	ldr	r2, [r7, #28]
 80009c4:	611a      	str	r2, [r3, #16]
          break;
 80009c6:	e008      	b.n	80009da <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009c8:	2308      	movs	r3, #8
 80009ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	69fa      	ldr	r2, [r7, #28]
 80009d0:	615a      	str	r2, [r3, #20]
          break;
 80009d2:	e002      	b.n	80009da <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009d4:	2300      	movs	r3, #0
 80009d6:	623b      	str	r3, [r7, #32]
          break;
 80009d8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009da:	69bb      	ldr	r3, [r7, #24]
 80009dc:	2bff      	cmp	r3, #255	; 0xff
 80009de:	d801      	bhi.n	80009e4 <HAL_GPIO_Init+0xec>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	e001      	b.n	80009e8 <HAL_GPIO_Init+0xf0>
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	3304      	adds	r3, #4
 80009e8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009ea:	69bb      	ldr	r3, [r7, #24]
 80009ec:	2bff      	cmp	r3, #255	; 0xff
 80009ee:	d802      	bhi.n	80009f6 <HAL_GPIO_Init+0xfe>
 80009f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f2:	009b      	lsls	r3, r3, #2
 80009f4:	e002      	b.n	80009fc <HAL_GPIO_Init+0x104>
 80009f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f8:	3b08      	subs	r3, #8
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	210f      	movs	r1, #15
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0a:	43db      	mvns	r3, r3
 8000a0c:	401a      	ands	r2, r3
 8000a0e:	6a39      	ldr	r1, [r7, #32]
 8000a10:	693b      	ldr	r3, [r7, #16]
 8000a12:	fa01 f303 	lsl.w	r3, r1, r3
 8000a16:	431a      	orrs	r2, r3
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	f000 8096 	beq.w	8000b56 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a2a:	4b59      	ldr	r3, [pc, #356]	; (8000b90 <HAL_GPIO_Init+0x298>)
 8000a2c:	699b      	ldr	r3, [r3, #24]
 8000a2e:	4a58      	ldr	r2, [pc, #352]	; (8000b90 <HAL_GPIO_Init+0x298>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	6193      	str	r3, [r2, #24]
 8000a36:	4b56      	ldr	r3, [pc, #344]	; (8000b90 <HAL_GPIO_Init+0x298>)
 8000a38:	699b      	ldr	r3, [r3, #24]
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a42:	4a54      	ldr	r2, [pc, #336]	; (8000b94 <HAL_GPIO_Init+0x29c>)
 8000a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a46:	089b      	lsrs	r3, r3, #2
 8000a48:	3302      	adds	r3, #2
 8000a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a4e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a52:	f003 0303 	and.w	r3, r3, #3
 8000a56:	009b      	lsls	r3, r3, #2
 8000a58:	220f      	movs	r2, #15
 8000a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5e:	43db      	mvns	r3, r3
 8000a60:	68fa      	ldr	r2, [r7, #12]
 8000a62:	4013      	ands	r3, r2
 8000a64:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4a4b      	ldr	r2, [pc, #300]	; (8000b98 <HAL_GPIO_Init+0x2a0>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d013      	beq.n	8000a96 <HAL_GPIO_Init+0x19e>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4a4a      	ldr	r2, [pc, #296]	; (8000b9c <HAL_GPIO_Init+0x2a4>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d00d      	beq.n	8000a92 <HAL_GPIO_Init+0x19a>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4a49      	ldr	r2, [pc, #292]	; (8000ba0 <HAL_GPIO_Init+0x2a8>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d007      	beq.n	8000a8e <HAL_GPIO_Init+0x196>
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4a48      	ldr	r2, [pc, #288]	; (8000ba4 <HAL_GPIO_Init+0x2ac>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d101      	bne.n	8000a8a <HAL_GPIO_Init+0x192>
 8000a86:	2303      	movs	r3, #3
 8000a88:	e006      	b.n	8000a98 <HAL_GPIO_Init+0x1a0>
 8000a8a:	2304      	movs	r3, #4
 8000a8c:	e004      	b.n	8000a98 <HAL_GPIO_Init+0x1a0>
 8000a8e:	2302      	movs	r3, #2
 8000a90:	e002      	b.n	8000a98 <HAL_GPIO_Init+0x1a0>
 8000a92:	2301      	movs	r3, #1
 8000a94:	e000      	b.n	8000a98 <HAL_GPIO_Init+0x1a0>
 8000a96:	2300      	movs	r3, #0
 8000a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a9a:	f002 0203 	and.w	r2, r2, #3
 8000a9e:	0092      	lsls	r2, r2, #2
 8000aa0:	4093      	lsls	r3, r2
 8000aa2:	68fa      	ldr	r2, [r7, #12]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000aa8:	493a      	ldr	r1, [pc, #232]	; (8000b94 <HAL_GPIO_Init+0x29c>)
 8000aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aac:	089b      	lsrs	r3, r3, #2
 8000aae:	3302      	adds	r3, #2
 8000ab0:	68fa      	ldr	r2, [r7, #12]
 8000ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d006      	beq.n	8000ad0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ac2:	4b39      	ldr	r3, [pc, #228]	; (8000ba8 <HAL_GPIO_Init+0x2b0>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	4938      	ldr	r1, [pc, #224]	; (8000ba8 <HAL_GPIO_Init+0x2b0>)
 8000ac8:	69bb      	ldr	r3, [r7, #24]
 8000aca:	4313      	orrs	r3, r2
 8000acc:	600b      	str	r3, [r1, #0]
 8000ace:	e006      	b.n	8000ade <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ad0:	4b35      	ldr	r3, [pc, #212]	; (8000ba8 <HAL_GPIO_Init+0x2b0>)
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	43db      	mvns	r3, r3
 8000ad8:	4933      	ldr	r1, [pc, #204]	; (8000ba8 <HAL_GPIO_Init+0x2b0>)
 8000ada:	4013      	ands	r3, r2
 8000adc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d006      	beq.n	8000af8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000aea:	4b2f      	ldr	r3, [pc, #188]	; (8000ba8 <HAL_GPIO_Init+0x2b0>)
 8000aec:	685a      	ldr	r2, [r3, #4]
 8000aee:	492e      	ldr	r1, [pc, #184]	; (8000ba8 <HAL_GPIO_Init+0x2b0>)
 8000af0:	69bb      	ldr	r3, [r7, #24]
 8000af2:	4313      	orrs	r3, r2
 8000af4:	604b      	str	r3, [r1, #4]
 8000af6:	e006      	b.n	8000b06 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000af8:	4b2b      	ldr	r3, [pc, #172]	; (8000ba8 <HAL_GPIO_Init+0x2b0>)
 8000afa:	685a      	ldr	r2, [r3, #4]
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	43db      	mvns	r3, r3
 8000b00:	4929      	ldr	r1, [pc, #164]	; (8000ba8 <HAL_GPIO_Init+0x2b0>)
 8000b02:	4013      	ands	r3, r2
 8000b04:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d006      	beq.n	8000b20 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b12:	4b25      	ldr	r3, [pc, #148]	; (8000ba8 <HAL_GPIO_Init+0x2b0>)
 8000b14:	689a      	ldr	r2, [r3, #8]
 8000b16:	4924      	ldr	r1, [pc, #144]	; (8000ba8 <HAL_GPIO_Init+0x2b0>)
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	608b      	str	r3, [r1, #8]
 8000b1e:	e006      	b.n	8000b2e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b20:	4b21      	ldr	r3, [pc, #132]	; (8000ba8 <HAL_GPIO_Init+0x2b0>)
 8000b22:	689a      	ldr	r2, [r3, #8]
 8000b24:	69bb      	ldr	r3, [r7, #24]
 8000b26:	43db      	mvns	r3, r3
 8000b28:	491f      	ldr	r1, [pc, #124]	; (8000ba8 <HAL_GPIO_Init+0x2b0>)
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d006      	beq.n	8000b48 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ba8 <HAL_GPIO_Init+0x2b0>)
 8000b3c:	68da      	ldr	r2, [r3, #12]
 8000b3e:	491a      	ldr	r1, [pc, #104]	; (8000ba8 <HAL_GPIO_Init+0x2b0>)
 8000b40:	69bb      	ldr	r3, [r7, #24]
 8000b42:	4313      	orrs	r3, r2
 8000b44:	60cb      	str	r3, [r1, #12]
 8000b46:	e006      	b.n	8000b56 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b48:	4b17      	ldr	r3, [pc, #92]	; (8000ba8 <HAL_GPIO_Init+0x2b0>)
 8000b4a:	68da      	ldr	r2, [r3, #12]
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	43db      	mvns	r3, r3
 8000b50:	4915      	ldr	r1, [pc, #84]	; (8000ba8 <HAL_GPIO_Init+0x2b0>)
 8000b52:	4013      	ands	r3, r2
 8000b54:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b58:	3301      	adds	r3, #1
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b62:	fa22 f303 	lsr.w	r3, r2, r3
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f47f aed0 	bne.w	800090c <HAL_GPIO_Init+0x14>
  }
}
 8000b6c:	bf00      	nop
 8000b6e:	372c      	adds	r7, #44	; 0x2c
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc80      	pop	{r7}
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	10210000 	.word	0x10210000
 8000b7c:	10110000 	.word	0x10110000
 8000b80:	10120000 	.word	0x10120000
 8000b84:	10310000 	.word	0x10310000
 8000b88:	10320000 	.word	0x10320000
 8000b8c:	10220000 	.word	0x10220000
 8000b90:	40021000 	.word	0x40021000
 8000b94:	40010000 	.word	0x40010000
 8000b98:	40010800 	.word	0x40010800
 8000b9c:	40010c00 	.word	0x40010c00
 8000ba0:	40011000 	.word	0x40011000
 8000ba4:	40011400 	.word	0x40011400
 8000ba8:	40010400 	.word	0x40010400

08000bac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d101      	bne.n	8000bbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e26c      	b.n	8001098 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f000 8087 	beq.w	8000cda <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bcc:	4b92      	ldr	r3, [pc, #584]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f003 030c 	and.w	r3, r3, #12
 8000bd4:	2b04      	cmp	r3, #4
 8000bd6:	d00c      	beq.n	8000bf2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bd8:	4b8f      	ldr	r3, [pc, #572]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f003 030c 	and.w	r3, r3, #12
 8000be0:	2b08      	cmp	r3, #8
 8000be2:	d112      	bne.n	8000c0a <HAL_RCC_OscConfig+0x5e>
 8000be4:	4b8c      	ldr	r3, [pc, #560]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bf0:	d10b      	bne.n	8000c0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bf2:	4b89      	ldr	r3, [pc, #548]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d06c      	beq.n	8000cd8 <HAL_RCC_OscConfig+0x12c>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d168      	bne.n	8000cd8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c06:	2301      	movs	r3, #1
 8000c08:	e246      	b.n	8001098 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c12:	d106      	bne.n	8000c22 <HAL_RCC_OscConfig+0x76>
 8000c14:	4b80      	ldr	r3, [pc, #512]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a7f      	ldr	r2, [pc, #508]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000c1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c1e:	6013      	str	r3, [r2, #0]
 8000c20:	e02e      	b.n	8000c80 <HAL_RCC_OscConfig+0xd4>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d10c      	bne.n	8000c44 <HAL_RCC_OscConfig+0x98>
 8000c2a:	4b7b      	ldr	r3, [pc, #492]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a7a      	ldr	r2, [pc, #488]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000c30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c34:	6013      	str	r3, [r2, #0]
 8000c36:	4b78      	ldr	r3, [pc, #480]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a77      	ldr	r2, [pc, #476]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000c3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c40:	6013      	str	r3, [r2, #0]
 8000c42:	e01d      	b.n	8000c80 <HAL_RCC_OscConfig+0xd4>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c4c:	d10c      	bne.n	8000c68 <HAL_RCC_OscConfig+0xbc>
 8000c4e:	4b72      	ldr	r3, [pc, #456]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a71      	ldr	r2, [pc, #452]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c58:	6013      	str	r3, [r2, #0]
 8000c5a:	4b6f      	ldr	r3, [pc, #444]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a6e      	ldr	r2, [pc, #440]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c64:	6013      	str	r3, [r2, #0]
 8000c66:	e00b      	b.n	8000c80 <HAL_RCC_OscConfig+0xd4>
 8000c68:	4b6b      	ldr	r3, [pc, #428]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a6a      	ldr	r2, [pc, #424]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c72:	6013      	str	r3, [r2, #0]
 8000c74:	4b68      	ldr	r3, [pc, #416]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a67      	ldr	r2, [pc, #412]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000c7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c7e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d013      	beq.n	8000cb0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c88:	f7ff fd1e 	bl	80006c8 <HAL_GetTick>
 8000c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c8e:	e008      	b.n	8000ca2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c90:	f7ff fd1a 	bl	80006c8 <HAL_GetTick>
 8000c94:	4602      	mov	r2, r0
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	2b64      	cmp	r3, #100	; 0x64
 8000c9c:	d901      	bls.n	8000ca2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	e1fa      	b.n	8001098 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ca2:	4b5d      	ldr	r3, [pc, #372]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d0f0      	beq.n	8000c90 <HAL_RCC_OscConfig+0xe4>
 8000cae:	e014      	b.n	8000cda <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cb0:	f7ff fd0a 	bl	80006c8 <HAL_GetTick>
 8000cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cb6:	e008      	b.n	8000cca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cb8:	f7ff fd06 	bl	80006c8 <HAL_GetTick>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	2b64      	cmp	r3, #100	; 0x64
 8000cc4:	d901      	bls.n	8000cca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	e1e6      	b.n	8001098 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cca:	4b53      	ldr	r3, [pc, #332]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d1f0      	bne.n	8000cb8 <HAL_RCC_OscConfig+0x10c>
 8000cd6:	e000      	b.n	8000cda <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f003 0302 	and.w	r3, r3, #2
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d063      	beq.n	8000dae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ce6:	4b4c      	ldr	r3, [pc, #304]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f003 030c 	and.w	r3, r3, #12
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d00b      	beq.n	8000d0a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000cf2:	4b49      	ldr	r3, [pc, #292]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f003 030c 	and.w	r3, r3, #12
 8000cfa:	2b08      	cmp	r3, #8
 8000cfc:	d11c      	bne.n	8000d38 <HAL_RCC_OscConfig+0x18c>
 8000cfe:	4b46      	ldr	r3, [pc, #280]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d116      	bne.n	8000d38 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d0a:	4b43      	ldr	r3, [pc, #268]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f003 0302 	and.w	r3, r3, #2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d005      	beq.n	8000d22 <HAL_RCC_OscConfig+0x176>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	691b      	ldr	r3, [r3, #16]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d001      	beq.n	8000d22 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e1ba      	b.n	8001098 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d22:	4b3d      	ldr	r3, [pc, #244]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	695b      	ldr	r3, [r3, #20]
 8000d2e:	00db      	lsls	r3, r3, #3
 8000d30:	4939      	ldr	r1, [pc, #228]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000d32:	4313      	orrs	r3, r2
 8000d34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d36:	e03a      	b.n	8000dae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	691b      	ldr	r3, [r3, #16]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d020      	beq.n	8000d82 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d40:	4b36      	ldr	r3, [pc, #216]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d46:	f7ff fcbf 	bl	80006c8 <HAL_GetTick>
 8000d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d4c:	e008      	b.n	8000d60 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d4e:	f7ff fcbb 	bl	80006c8 <HAL_GetTick>
 8000d52:	4602      	mov	r2, r0
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	1ad3      	subs	r3, r2, r3
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d901      	bls.n	8000d60 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	e19b      	b.n	8001098 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d60:	4b2d      	ldr	r3, [pc, #180]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f003 0302 	and.w	r3, r3, #2
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d0f0      	beq.n	8000d4e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d6c:	4b2a      	ldr	r3, [pc, #168]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	695b      	ldr	r3, [r3, #20]
 8000d78:	00db      	lsls	r3, r3, #3
 8000d7a:	4927      	ldr	r1, [pc, #156]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	600b      	str	r3, [r1, #0]
 8000d80:	e015      	b.n	8000dae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d82:	4b26      	ldr	r3, [pc, #152]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d88:	f7ff fc9e 	bl	80006c8 <HAL_GetTick>
 8000d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d8e:	e008      	b.n	8000da2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d90:	f7ff fc9a 	bl	80006c8 <HAL_GetTick>
 8000d94:	4602      	mov	r2, r0
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	2b02      	cmp	r3, #2
 8000d9c:	d901      	bls.n	8000da2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	e17a      	b.n	8001098 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000da2:	4b1d      	ldr	r3, [pc, #116]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f003 0302 	and.w	r3, r3, #2
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d1f0      	bne.n	8000d90 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f003 0308 	and.w	r3, r3, #8
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d03a      	beq.n	8000e30 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	699b      	ldr	r3, [r3, #24]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d019      	beq.n	8000df6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dc2:	4b17      	ldr	r3, [pc, #92]	; (8000e20 <HAL_RCC_OscConfig+0x274>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dc8:	f7ff fc7e 	bl	80006c8 <HAL_GetTick>
 8000dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dce:	e008      	b.n	8000de2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dd0:	f7ff fc7a 	bl	80006c8 <HAL_GetTick>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	2b02      	cmp	r3, #2
 8000ddc:	d901      	bls.n	8000de2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000dde:	2303      	movs	r3, #3
 8000de0:	e15a      	b.n	8001098 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000de2:	4b0d      	ldr	r3, [pc, #52]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d0f0      	beq.n	8000dd0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000dee:	2001      	movs	r0, #1
 8000df0:	f000 faa8 	bl	8001344 <RCC_Delay>
 8000df4:	e01c      	b.n	8000e30 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000df6:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <HAL_RCC_OscConfig+0x274>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dfc:	f7ff fc64 	bl	80006c8 <HAL_GetTick>
 8000e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e02:	e00f      	b.n	8000e24 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e04:	f7ff fc60 	bl	80006c8 <HAL_GetTick>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d908      	bls.n	8000e24 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e12:	2303      	movs	r3, #3
 8000e14:	e140      	b.n	8001098 <HAL_RCC_OscConfig+0x4ec>
 8000e16:	bf00      	nop
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	42420000 	.word	0x42420000
 8000e20:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e24:	4b9e      	ldr	r3, [pc, #632]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e28:	f003 0302 	and.w	r3, r3, #2
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d1e9      	bne.n	8000e04 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f003 0304 	and.w	r3, r3, #4
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	f000 80a6 	beq.w	8000f8a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e42:	4b97      	ldr	r3, [pc, #604]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000e44:	69db      	ldr	r3, [r3, #28]
 8000e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d10d      	bne.n	8000e6a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e4e:	4b94      	ldr	r3, [pc, #592]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000e50:	69db      	ldr	r3, [r3, #28]
 8000e52:	4a93      	ldr	r2, [pc, #588]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e58:	61d3      	str	r3, [r2, #28]
 8000e5a:	4b91      	ldr	r3, [pc, #580]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000e5c:	69db      	ldr	r3, [r3, #28]
 8000e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e66:	2301      	movs	r3, #1
 8000e68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e6a:	4b8e      	ldr	r3, [pc, #568]	; (80010a4 <HAL_RCC_OscConfig+0x4f8>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d118      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e76:	4b8b      	ldr	r3, [pc, #556]	; (80010a4 <HAL_RCC_OscConfig+0x4f8>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a8a      	ldr	r2, [pc, #552]	; (80010a4 <HAL_RCC_OscConfig+0x4f8>)
 8000e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e82:	f7ff fc21 	bl	80006c8 <HAL_GetTick>
 8000e86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e88:	e008      	b.n	8000e9c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e8a:	f7ff fc1d 	bl	80006c8 <HAL_GetTick>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	2b64      	cmp	r3, #100	; 0x64
 8000e96:	d901      	bls.n	8000e9c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	e0fd      	b.n	8001098 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e9c:	4b81      	ldr	r3, [pc, #516]	; (80010a4 <HAL_RCC_OscConfig+0x4f8>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d0f0      	beq.n	8000e8a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d106      	bne.n	8000ebe <HAL_RCC_OscConfig+0x312>
 8000eb0:	4b7b      	ldr	r3, [pc, #492]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000eb2:	6a1b      	ldr	r3, [r3, #32]
 8000eb4:	4a7a      	ldr	r2, [pc, #488]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000eb6:	f043 0301 	orr.w	r3, r3, #1
 8000eba:	6213      	str	r3, [r2, #32]
 8000ebc:	e02d      	b.n	8000f1a <HAL_RCC_OscConfig+0x36e>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	68db      	ldr	r3, [r3, #12]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d10c      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x334>
 8000ec6:	4b76      	ldr	r3, [pc, #472]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000ec8:	6a1b      	ldr	r3, [r3, #32]
 8000eca:	4a75      	ldr	r2, [pc, #468]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000ecc:	f023 0301 	bic.w	r3, r3, #1
 8000ed0:	6213      	str	r3, [r2, #32]
 8000ed2:	4b73      	ldr	r3, [pc, #460]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000ed4:	6a1b      	ldr	r3, [r3, #32]
 8000ed6:	4a72      	ldr	r2, [pc, #456]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000ed8:	f023 0304 	bic.w	r3, r3, #4
 8000edc:	6213      	str	r3, [r2, #32]
 8000ede:	e01c      	b.n	8000f1a <HAL_RCC_OscConfig+0x36e>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	2b05      	cmp	r3, #5
 8000ee6:	d10c      	bne.n	8000f02 <HAL_RCC_OscConfig+0x356>
 8000ee8:	4b6d      	ldr	r3, [pc, #436]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000eea:	6a1b      	ldr	r3, [r3, #32]
 8000eec:	4a6c      	ldr	r2, [pc, #432]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000eee:	f043 0304 	orr.w	r3, r3, #4
 8000ef2:	6213      	str	r3, [r2, #32]
 8000ef4:	4b6a      	ldr	r3, [pc, #424]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000ef6:	6a1b      	ldr	r3, [r3, #32]
 8000ef8:	4a69      	ldr	r2, [pc, #420]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000efa:	f043 0301 	orr.w	r3, r3, #1
 8000efe:	6213      	str	r3, [r2, #32]
 8000f00:	e00b      	b.n	8000f1a <HAL_RCC_OscConfig+0x36e>
 8000f02:	4b67      	ldr	r3, [pc, #412]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000f04:	6a1b      	ldr	r3, [r3, #32]
 8000f06:	4a66      	ldr	r2, [pc, #408]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000f08:	f023 0301 	bic.w	r3, r3, #1
 8000f0c:	6213      	str	r3, [r2, #32]
 8000f0e:	4b64      	ldr	r3, [pc, #400]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000f10:	6a1b      	ldr	r3, [r3, #32]
 8000f12:	4a63      	ldr	r2, [pc, #396]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000f14:	f023 0304 	bic.w	r3, r3, #4
 8000f18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	68db      	ldr	r3, [r3, #12]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d015      	beq.n	8000f4e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f22:	f7ff fbd1 	bl	80006c8 <HAL_GetTick>
 8000f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f28:	e00a      	b.n	8000f40 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f2a:	f7ff fbcd 	bl	80006c8 <HAL_GetTick>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d901      	bls.n	8000f40 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	e0ab      	b.n	8001098 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f40:	4b57      	ldr	r3, [pc, #348]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000f42:	6a1b      	ldr	r3, [r3, #32]
 8000f44:	f003 0302 	and.w	r3, r3, #2
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d0ee      	beq.n	8000f2a <HAL_RCC_OscConfig+0x37e>
 8000f4c:	e014      	b.n	8000f78 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f4e:	f7ff fbbb 	bl	80006c8 <HAL_GetTick>
 8000f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f54:	e00a      	b.n	8000f6c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f56:	f7ff fbb7 	bl	80006c8 <HAL_GetTick>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d901      	bls.n	8000f6c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	e095      	b.n	8001098 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f6c:	4b4c      	ldr	r3, [pc, #304]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000f6e:	6a1b      	ldr	r3, [r3, #32]
 8000f70:	f003 0302 	and.w	r3, r3, #2
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d1ee      	bne.n	8000f56 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f78:	7dfb      	ldrb	r3, [r7, #23]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d105      	bne.n	8000f8a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f7e:	4b48      	ldr	r3, [pc, #288]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000f80:	69db      	ldr	r3, [r3, #28]
 8000f82:	4a47      	ldr	r2, [pc, #284]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000f84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f88:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	f000 8081 	beq.w	8001096 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f94:	4b42      	ldr	r3, [pc, #264]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f003 030c 	and.w	r3, r3, #12
 8000f9c:	2b08      	cmp	r3, #8
 8000f9e:	d061      	beq.n	8001064 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	69db      	ldr	r3, [r3, #28]
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d146      	bne.n	8001036 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fa8:	4b3f      	ldr	r3, [pc, #252]	; (80010a8 <HAL_RCC_OscConfig+0x4fc>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fae:	f7ff fb8b 	bl	80006c8 <HAL_GetTick>
 8000fb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fb4:	e008      	b.n	8000fc8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fb6:	f7ff fb87 	bl	80006c8 <HAL_GetTick>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d901      	bls.n	8000fc8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	e067      	b.n	8001098 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fc8:	4b35      	ldr	r3, [pc, #212]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d1f0      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6a1b      	ldr	r3, [r3, #32]
 8000fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fdc:	d108      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fde:	4b30      	ldr	r3, [pc, #192]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	492d      	ldr	r1, [pc, #180]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000fec:	4313      	orrs	r3, r2
 8000fee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ff0:	4b2b      	ldr	r3, [pc, #172]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6a19      	ldr	r1, [r3, #32]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001000:	430b      	orrs	r3, r1
 8001002:	4927      	ldr	r1, [pc, #156]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8001004:	4313      	orrs	r3, r2
 8001006:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001008:	4b27      	ldr	r3, [pc, #156]	; (80010a8 <HAL_RCC_OscConfig+0x4fc>)
 800100a:	2201      	movs	r2, #1
 800100c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800100e:	f7ff fb5b 	bl	80006c8 <HAL_GetTick>
 8001012:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001014:	e008      	b.n	8001028 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001016:	f7ff fb57 	bl	80006c8 <HAL_GetTick>
 800101a:	4602      	mov	r2, r0
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	2b02      	cmp	r3, #2
 8001022:	d901      	bls.n	8001028 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001024:	2303      	movs	r3, #3
 8001026:	e037      	b.n	8001098 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001028:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d0f0      	beq.n	8001016 <HAL_RCC_OscConfig+0x46a>
 8001034:	e02f      	b.n	8001096 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001036:	4b1c      	ldr	r3, [pc, #112]	; (80010a8 <HAL_RCC_OscConfig+0x4fc>)
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800103c:	f7ff fb44 	bl	80006c8 <HAL_GetTick>
 8001040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001042:	e008      	b.n	8001056 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001044:	f7ff fb40 	bl	80006c8 <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	2b02      	cmp	r3, #2
 8001050:	d901      	bls.n	8001056 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001052:	2303      	movs	r3, #3
 8001054:	e020      	b.n	8001098 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001056:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d1f0      	bne.n	8001044 <HAL_RCC_OscConfig+0x498>
 8001062:	e018      	b.n	8001096 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	69db      	ldr	r3, [r3, #28]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d101      	bne.n	8001070 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	e013      	b.n	8001098 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001070:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6a1b      	ldr	r3, [r3, #32]
 8001080:	429a      	cmp	r2, r3
 8001082:	d106      	bne.n	8001092 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800108e:	429a      	cmp	r2, r3
 8001090:	d001      	beq.n	8001096 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e000      	b.n	8001098 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001096:	2300      	movs	r3, #0
}
 8001098:	4618      	mov	r0, r3
 800109a:	3718      	adds	r7, #24
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40021000 	.word	0x40021000
 80010a4:	40007000 	.word	0x40007000
 80010a8:	42420060 	.word	0x42420060

080010ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d101      	bne.n	80010c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e0d0      	b.n	8001262 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010c0:	4b6a      	ldr	r3, [pc, #424]	; (800126c <HAL_RCC_ClockConfig+0x1c0>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0307 	and.w	r3, r3, #7
 80010c8:	683a      	ldr	r2, [r7, #0]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d910      	bls.n	80010f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ce:	4b67      	ldr	r3, [pc, #412]	; (800126c <HAL_RCC_ClockConfig+0x1c0>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f023 0207 	bic.w	r2, r3, #7
 80010d6:	4965      	ldr	r1, [pc, #404]	; (800126c <HAL_RCC_ClockConfig+0x1c0>)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	4313      	orrs	r3, r2
 80010dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010de:	4b63      	ldr	r3, [pc, #396]	; (800126c <HAL_RCC_ClockConfig+0x1c0>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	683a      	ldr	r2, [r7, #0]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d001      	beq.n	80010f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e0b8      	b.n	8001262 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 0302 	and.w	r3, r3, #2
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d020      	beq.n	800113e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 0304 	and.w	r3, r3, #4
 8001104:	2b00      	cmp	r3, #0
 8001106:	d005      	beq.n	8001114 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001108:	4b59      	ldr	r3, [pc, #356]	; (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	4a58      	ldr	r2, [pc, #352]	; (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 800110e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001112:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0308 	and.w	r3, r3, #8
 800111c:	2b00      	cmp	r3, #0
 800111e:	d005      	beq.n	800112c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001120:	4b53      	ldr	r3, [pc, #332]	; (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	4a52      	ldr	r2, [pc, #328]	; (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 8001126:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800112a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800112c:	4b50      	ldr	r3, [pc, #320]	; (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	494d      	ldr	r1, [pc, #308]	; (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 800113a:	4313      	orrs	r3, r2
 800113c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	2b00      	cmp	r3, #0
 8001148:	d040      	beq.n	80011cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d107      	bne.n	8001162 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001152:	4b47      	ldr	r3, [pc, #284]	; (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d115      	bne.n	800118a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e07f      	b.n	8001262 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	2b02      	cmp	r3, #2
 8001168:	d107      	bne.n	800117a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800116a:	4b41      	ldr	r3, [pc, #260]	; (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d109      	bne.n	800118a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e073      	b.n	8001262 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800117a:	4b3d      	ldr	r3, [pc, #244]	; (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	2b00      	cmp	r3, #0
 8001184:	d101      	bne.n	800118a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e06b      	b.n	8001262 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800118a:	4b39      	ldr	r3, [pc, #228]	; (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f023 0203 	bic.w	r2, r3, #3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	4936      	ldr	r1, [pc, #216]	; (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 8001198:	4313      	orrs	r3, r2
 800119a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800119c:	f7ff fa94 	bl	80006c8 <HAL_GetTick>
 80011a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011a2:	e00a      	b.n	80011ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011a4:	f7ff fa90 	bl	80006c8 <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d901      	bls.n	80011ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e053      	b.n	8001262 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ba:	4b2d      	ldr	r3, [pc, #180]	; (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f003 020c 	and.w	r2, r3, #12
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d1eb      	bne.n	80011a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011cc:	4b27      	ldr	r3, [pc, #156]	; (800126c <HAL_RCC_ClockConfig+0x1c0>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0307 	and.w	r3, r3, #7
 80011d4:	683a      	ldr	r2, [r7, #0]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d210      	bcs.n	80011fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011da:	4b24      	ldr	r3, [pc, #144]	; (800126c <HAL_RCC_ClockConfig+0x1c0>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f023 0207 	bic.w	r2, r3, #7
 80011e2:	4922      	ldr	r1, [pc, #136]	; (800126c <HAL_RCC_ClockConfig+0x1c0>)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ea:	4b20      	ldr	r3, [pc, #128]	; (800126c <HAL_RCC_ClockConfig+0x1c0>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	683a      	ldr	r2, [r7, #0]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d001      	beq.n	80011fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e032      	b.n	8001262 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0304 	and.w	r3, r3, #4
 8001204:	2b00      	cmp	r3, #0
 8001206:	d008      	beq.n	800121a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001208:	4b19      	ldr	r3, [pc, #100]	; (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	4916      	ldr	r1, [pc, #88]	; (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 8001216:	4313      	orrs	r3, r2
 8001218:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0308 	and.w	r3, r3, #8
 8001222:	2b00      	cmp	r3, #0
 8001224:	d009      	beq.n	800123a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001226:	4b12      	ldr	r3, [pc, #72]	; (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	00db      	lsls	r3, r3, #3
 8001234:	490e      	ldr	r1, [pc, #56]	; (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 8001236:	4313      	orrs	r3, r2
 8001238:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800123a:	f000 f821 	bl	8001280 <HAL_RCC_GetSysClockFreq>
 800123e:	4601      	mov	r1, r0
 8001240:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	091b      	lsrs	r3, r3, #4
 8001246:	f003 030f 	and.w	r3, r3, #15
 800124a:	4a0a      	ldr	r2, [pc, #40]	; (8001274 <HAL_RCC_ClockConfig+0x1c8>)
 800124c:	5cd3      	ldrb	r3, [r2, r3]
 800124e:	fa21 f303 	lsr.w	r3, r1, r3
 8001252:	4a09      	ldr	r2, [pc, #36]	; (8001278 <HAL_RCC_ClockConfig+0x1cc>)
 8001254:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <HAL_RCC_ClockConfig+0x1d0>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff f9f2 	bl	8000644 <HAL_InitTick>

  return HAL_OK;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40022000 	.word	0x40022000
 8001270:	40021000 	.word	0x40021000
 8001274:	080023b0 	.word	0x080023b0
 8001278:	20000000 	.word	0x20000000
 800127c:	20000004 	.word	0x20000004

08001280 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001280:	b490      	push	{r4, r7}
 8001282:	b08a      	sub	sp, #40	; 0x28
 8001284:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001286:	4b2a      	ldr	r3, [pc, #168]	; (8001330 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001288:	1d3c      	adds	r4, r7, #4
 800128a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800128c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001290:	4b28      	ldr	r3, [pc, #160]	; (8001334 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001292:	881b      	ldrh	r3, [r3, #0]
 8001294:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001296:	2300      	movs	r3, #0
 8001298:	61fb      	str	r3, [r7, #28]
 800129a:	2300      	movs	r3, #0
 800129c:	61bb      	str	r3, [r7, #24]
 800129e:	2300      	movs	r3, #0
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80012a6:	2300      	movs	r3, #0
 80012a8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80012aa:	4b23      	ldr	r3, [pc, #140]	; (8001338 <HAL_RCC_GetSysClockFreq+0xb8>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f003 030c 	and.w	r3, r3, #12
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	d002      	beq.n	80012c0 <HAL_RCC_GetSysClockFreq+0x40>
 80012ba:	2b08      	cmp	r3, #8
 80012bc:	d003      	beq.n	80012c6 <HAL_RCC_GetSysClockFreq+0x46>
 80012be:	e02d      	b.n	800131c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012c0:	4b1e      	ldr	r3, [pc, #120]	; (800133c <HAL_RCC_GetSysClockFreq+0xbc>)
 80012c2:	623b      	str	r3, [r7, #32]
      break;
 80012c4:	e02d      	b.n	8001322 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	0c9b      	lsrs	r3, r3, #18
 80012ca:	f003 030f 	and.w	r3, r3, #15
 80012ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012d2:	4413      	add	r3, r2
 80012d4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80012d8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d013      	beq.n	800130c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012e4:	4b14      	ldr	r3, [pc, #80]	; (8001338 <HAL_RCC_GetSysClockFreq+0xb8>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	0c5b      	lsrs	r3, r3, #17
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012f2:	4413      	add	r3, r2
 80012f4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80012f8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	4a0f      	ldr	r2, [pc, #60]	; (800133c <HAL_RCC_GetSysClockFreq+0xbc>)
 80012fe:	fb02 f203 	mul.w	r2, r2, r3
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	fbb2 f3f3 	udiv	r3, r2, r3
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
 800130a:	e004      	b.n	8001316 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	4a0c      	ldr	r2, [pc, #48]	; (8001340 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001310:	fb02 f303 	mul.w	r3, r2, r3
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001318:	623b      	str	r3, [r7, #32]
      break;
 800131a:	e002      	b.n	8001322 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800131c:	4b07      	ldr	r3, [pc, #28]	; (800133c <HAL_RCC_GetSysClockFreq+0xbc>)
 800131e:	623b      	str	r3, [r7, #32]
      break;
 8001320:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001322:	6a3b      	ldr	r3, [r7, #32]
}
 8001324:	4618      	mov	r0, r3
 8001326:	3728      	adds	r7, #40	; 0x28
 8001328:	46bd      	mov	sp, r7
 800132a:	bc90      	pop	{r4, r7}
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	0800239c 	.word	0x0800239c
 8001334:	080023ac 	.word	0x080023ac
 8001338:	40021000 	.word	0x40021000
 800133c:	007a1200 	.word	0x007a1200
 8001340:	003d0900 	.word	0x003d0900

08001344 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800134c:	4b0a      	ldr	r3, [pc, #40]	; (8001378 <RCC_Delay+0x34>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a0a      	ldr	r2, [pc, #40]	; (800137c <RCC_Delay+0x38>)
 8001352:	fba2 2303 	umull	r2, r3, r2, r3
 8001356:	0a5b      	lsrs	r3, r3, #9
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	fb02 f303 	mul.w	r3, r2, r3
 800135e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001360:	bf00      	nop
  }
  while (Delay --);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	1e5a      	subs	r2, r3, #1
 8001366:	60fa      	str	r2, [r7, #12]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d1f9      	bne.n	8001360 <RCC_Delay+0x1c>
}
 800136c:	bf00      	nop
 800136e:	3714      	adds	r7, #20
 8001370:	46bd      	mov	sp, r7
 8001372:	bc80      	pop	{r7}
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	20000000 	.word	0x20000000
 800137c:	10624dd3 	.word	0x10624dd3

08001380 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d101      	bne.n	8001392 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e041      	b.n	8001416 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001398:	b2db      	uxtb	r3, r3
 800139a:	2b00      	cmp	r3, #0
 800139c:	d106      	bne.n	80013ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff f84c 	bl	8000444 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2202      	movs	r2, #2
 80013b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3304      	adds	r3, #4
 80013bc:	4619      	mov	r1, r3
 80013be:	4610      	mov	r0, r2
 80013c0:	f000 fbb6 	bl	8001b30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2201      	movs	r2, #1
 80013c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2201      	movs	r2, #1
 80013d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2201      	movs	r2, #1
 80013d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2201      	movs	r2, #1
 80013e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2201      	movs	r2, #1
 80013e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2201      	movs	r2, #1
 80013f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2201      	movs	r2, #1
 80013f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2201      	movs	r2, #1
 8001400:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2201      	movs	r2, #1
 8001408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2201      	movs	r2, #1
 8001410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d101      	bne.n	8001430 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e041      	b.n	80014b4 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001436:	b2db      	uxtb	r3, r3
 8001438:	2b00      	cmp	r3, #0
 800143a:	d106      	bne.n	800144a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f000 f839 	bl	80014bc <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2202      	movs	r2, #2
 800144e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	3304      	adds	r3, #4
 800145a:	4619      	mov	r1, r3
 800145c:	4610      	mov	r0, r2
 800145e:	f000 fb67 	bl	8001b30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2201      	movs	r2, #1
 8001466:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2201      	movs	r2, #1
 800146e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2201      	movs	r2, #1
 8001476:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2201      	movs	r2, #1
 800147e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2201      	movs	r2, #1
 8001486:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2201      	movs	r2, #1
 800148e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2201      	movs	r2, #1
 8001496:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2201      	movs	r2, #1
 800149e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2201      	movs	r2, #1
 80014a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2201      	movs	r2, #1
 80014ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80014b2:	2300      	movs	r3, #0
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bc80      	pop	{r7}
 80014cc:	4770      	bx	lr

080014ce <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d101      	bne.n	80014e0 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e041      	b.n	8001564 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d106      	bne.n	80014fa <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f000 f839 	bl	800156c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2202      	movs	r2, #2
 80014fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	3304      	adds	r3, #4
 800150a:	4619      	mov	r1, r3
 800150c:	4610      	mov	r0, r2
 800150e:	f000 fb0f 	bl	8001b30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2201      	movs	r2, #1
 8001516:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2201      	movs	r2, #1
 800151e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2201      	movs	r2, #1
 8001526:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2201      	movs	r2, #1
 800152e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2201      	movs	r2, #1
 8001536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2201      	movs	r2, #1
 800153e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2201      	movs	r2, #1
 8001546:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2201      	movs	r2, #1
 800154e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2201      	movs	r2, #1
 8001556:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2201      	movs	r2, #1
 800155e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001562:	2300      	movs	r3, #0
}
 8001564:	4618      	mov	r0, r3
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr

0800157e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	2b02      	cmp	r3, #2
 8001592:	d122      	bne.n	80015da <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d11b      	bne.n	80015da <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f06f 0202 	mvn.w	r2, #2
 80015aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	f003 0303 	and.w	r3, r3, #3
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d003      	beq.n	80015c8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f000 fa9a 	bl	8001afa <HAL_TIM_IC_CaptureCallback>
 80015c6:	e005      	b.n	80015d4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f000 fa8d 	bl	8001ae8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f000 fa9c 	bl	8001b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	691b      	ldr	r3, [r3, #16]
 80015e0:	f003 0304 	and.w	r3, r3, #4
 80015e4:	2b04      	cmp	r3, #4
 80015e6:	d122      	bne.n	800162e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	f003 0304 	and.w	r3, r3, #4
 80015f2:	2b04      	cmp	r3, #4
 80015f4:	d11b      	bne.n	800162e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f06f 0204 	mvn.w	r2, #4
 80015fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2202      	movs	r2, #2
 8001604:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001610:	2b00      	cmp	r3, #0
 8001612:	d003      	beq.n	800161c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f000 fa70 	bl	8001afa <HAL_TIM_IC_CaptureCallback>
 800161a:	e005      	b.n	8001628 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f000 fa63 	bl	8001ae8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f000 fa72 	bl	8001b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	691b      	ldr	r3, [r3, #16]
 8001634:	f003 0308 	and.w	r3, r3, #8
 8001638:	2b08      	cmp	r3, #8
 800163a:	d122      	bne.n	8001682 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	f003 0308 	and.w	r3, r3, #8
 8001646:	2b08      	cmp	r3, #8
 8001648:	d11b      	bne.n	8001682 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f06f 0208 	mvn.w	r2, #8
 8001652:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2204      	movs	r2, #4
 8001658:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	69db      	ldr	r3, [r3, #28]
 8001660:	f003 0303 	and.w	r3, r3, #3
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 fa46 	bl	8001afa <HAL_TIM_IC_CaptureCallback>
 800166e:	e005      	b.n	800167c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f000 fa39 	bl	8001ae8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f000 fa48 	bl	8001b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	691b      	ldr	r3, [r3, #16]
 8001688:	f003 0310 	and.w	r3, r3, #16
 800168c:	2b10      	cmp	r3, #16
 800168e:	d122      	bne.n	80016d6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	f003 0310 	and.w	r3, r3, #16
 800169a:	2b10      	cmp	r3, #16
 800169c:	d11b      	bne.n	80016d6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f06f 0210 	mvn.w	r2, #16
 80016a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2208      	movs	r2, #8
 80016ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	69db      	ldr	r3, [r3, #28]
 80016b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f000 fa1c 	bl	8001afa <HAL_TIM_IC_CaptureCallback>
 80016c2:	e005      	b.n	80016d0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f000 fa0f 	bl	8001ae8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f000 fa1e 	bl	8001b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	691b      	ldr	r3, [r3, #16]
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d10e      	bne.n	8001702 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d107      	bne.n	8001702 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f06f 0201 	mvn.w	r2, #1
 80016fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f000 f9ea 	bl	8001ad6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800170c:	2b80      	cmp	r3, #128	; 0x80
 800170e:	d10e      	bne.n	800172e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800171a:	2b80      	cmp	r3, #128	; 0x80
 800171c:	d107      	bne.n	800172e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f000 fdf6 	bl	800231a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001738:	2b40      	cmp	r3, #64	; 0x40
 800173a:	d10e      	bne.n	800175a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001746:	2b40      	cmp	r3, #64	; 0x40
 8001748:	d107      	bne.n	800175a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001752:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f000 f9e2 	bl	8001b1e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	691b      	ldr	r3, [r3, #16]
 8001760:	f003 0320 	and.w	r3, r3, #32
 8001764:	2b20      	cmp	r3, #32
 8001766:	d10e      	bne.n	8001786 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	f003 0320 	and.w	r3, r3, #32
 8001772:	2b20      	cmp	r3, #32
 8001774:	d107      	bne.n	8001786 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f06f 0220 	mvn.w	r2, #32
 800177e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f000 fdc1 	bl	8002308 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d101      	bne.n	80017aa <HAL_TIM_OC_ConfigChannel+0x1a>
 80017a6:	2302      	movs	r3, #2
 80017a8:	e046      	b.n	8001838 <HAL_TIM_OC_ConfigChannel+0xa8>
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2201      	movs	r2, #1
 80017ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b0c      	cmp	r3, #12
 80017b6:	d839      	bhi.n	800182c <HAL_TIM_OC_ConfigChannel+0x9c>
 80017b8:	a201      	add	r2, pc, #4	; (adr r2, 80017c0 <HAL_TIM_OC_ConfigChannel+0x30>)
 80017ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017be:	bf00      	nop
 80017c0:	080017f5 	.word	0x080017f5
 80017c4:	0800182d 	.word	0x0800182d
 80017c8:	0800182d 	.word	0x0800182d
 80017cc:	0800182d 	.word	0x0800182d
 80017d0:	08001803 	.word	0x08001803
 80017d4:	0800182d 	.word	0x0800182d
 80017d8:	0800182d 	.word	0x0800182d
 80017dc:	0800182d 	.word	0x0800182d
 80017e0:	08001811 	.word	0x08001811
 80017e4:	0800182d 	.word	0x0800182d
 80017e8:	0800182d 	.word	0x0800182d
 80017ec:	0800182d 	.word	0x0800182d
 80017f0:	0800181f 	.word	0x0800181f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	68b9      	ldr	r1, [r7, #8]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 f9fa 	bl	8001bf4 <TIM_OC1_SetConfig>
      break;
 8001800:	e015      	b.n	800182e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	68b9      	ldr	r1, [r7, #8]
 8001808:	4618      	mov	r0, r3
 800180a:	f000 fa59 	bl	8001cc0 <TIM_OC2_SetConfig>
      break;
 800180e:	e00e      	b.n	800182e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	68b9      	ldr	r1, [r7, #8]
 8001816:	4618      	mov	r0, r3
 8001818:	f000 fabc 	bl	8001d94 <TIM_OC3_SetConfig>
      break;
 800181c:	e007      	b.n	800182e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	68b9      	ldr	r1, [r7, #8]
 8001824:	4618      	mov	r0, r3
 8001826:	f000 fb1f 	bl	8001e68 <TIM_OC4_SetConfig>
      break;
 800182a:	e000      	b.n	800182e <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 800182c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001852:	2b01      	cmp	r3, #1
 8001854:	d101      	bne.n	800185a <HAL_TIM_IC_ConfigChannel+0x1a>
 8001856:	2302      	movs	r3, #2
 8001858:	e082      	b.n	8001960 <HAL_TIM_IC_ConfigChannel+0x120>
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2201      	movs	r2, #1
 800185e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d11b      	bne.n	80018a0 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	6818      	ldr	r0, [r3, #0]
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	6819      	ldr	r1, [r3, #0]
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	685a      	ldr	r2, [r3, #4]
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	f000 fb44 	bl	8001f04 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	699a      	ldr	r2, [r3, #24]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f022 020c 	bic.w	r2, r2, #12
 800188a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6999      	ldr	r1, [r3, #24]
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	689a      	ldr	r2, [r3, #8]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	430a      	orrs	r2, r1
 800189c:	619a      	str	r2, [r3, #24]
 800189e:	e05a      	b.n	8001956 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	d11c      	bne.n	80018e0 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	6818      	ldr	r0, [r3, #0]
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	6819      	ldr	r1, [r3, #0]
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	685a      	ldr	r2, [r3, #4]
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	f000 fbad 	bl	8002014 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	699a      	ldr	r2, [r3, #24]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80018c8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	6999      	ldr	r1, [r3, #24]
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	021a      	lsls	r2, r3, #8
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	430a      	orrs	r2, r1
 80018dc:	619a      	str	r2, [r3, #24]
 80018de:	e03a      	b.n	8001956 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2b08      	cmp	r3, #8
 80018e4:	d11b      	bne.n	800191e <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6818      	ldr	r0, [r3, #0]
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	6819      	ldr	r1, [r3, #0]
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	685a      	ldr	r2, [r3, #4]
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	f000 fbf8 	bl	80020ea <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	69da      	ldr	r2, [r3, #28]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f022 020c 	bic.w	r2, r2, #12
 8001908:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	69d9      	ldr	r1, [r3, #28]
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	430a      	orrs	r2, r1
 800191a:	61da      	str	r2, [r3, #28]
 800191c:	e01b      	b.n	8001956 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	6818      	ldr	r0, [r3, #0]
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	6819      	ldr	r1, [r3, #0]
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	685a      	ldr	r2, [r3, #4]
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	f000 fc17 	bl	8002160 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	69da      	ldr	r2, [r3, #28]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001940:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	69d9      	ldr	r1, [r3, #28]
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	021a      	lsls	r2, r3, #8
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	430a      	orrs	r2, r1
 8001954:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	3710      	adds	r7, #16
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001978:	2b01      	cmp	r3, #1
 800197a:	d101      	bne.n	8001980 <HAL_TIM_ConfigClockSource+0x18>
 800197c:	2302      	movs	r3, #2
 800197e:	e0a6      	b.n	8001ace <HAL_TIM_ConfigClockSource+0x166>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2202      	movs	r2, #2
 800198c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800199e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80019a6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68fa      	ldr	r2, [r7, #12]
 80019ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b40      	cmp	r3, #64	; 0x40
 80019b6:	d067      	beq.n	8001a88 <HAL_TIM_ConfigClockSource+0x120>
 80019b8:	2b40      	cmp	r3, #64	; 0x40
 80019ba:	d80b      	bhi.n	80019d4 <HAL_TIM_ConfigClockSource+0x6c>
 80019bc:	2b10      	cmp	r3, #16
 80019be:	d073      	beq.n	8001aa8 <HAL_TIM_ConfigClockSource+0x140>
 80019c0:	2b10      	cmp	r3, #16
 80019c2:	d802      	bhi.n	80019ca <HAL_TIM_ConfigClockSource+0x62>
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d06f      	beq.n	8001aa8 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80019c8:	e078      	b.n	8001abc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80019ca:	2b20      	cmp	r3, #32
 80019cc:	d06c      	beq.n	8001aa8 <HAL_TIM_ConfigClockSource+0x140>
 80019ce:	2b30      	cmp	r3, #48	; 0x30
 80019d0:	d06a      	beq.n	8001aa8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80019d2:	e073      	b.n	8001abc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80019d4:	2b70      	cmp	r3, #112	; 0x70
 80019d6:	d00d      	beq.n	80019f4 <HAL_TIM_ConfigClockSource+0x8c>
 80019d8:	2b70      	cmp	r3, #112	; 0x70
 80019da:	d804      	bhi.n	80019e6 <HAL_TIM_ConfigClockSource+0x7e>
 80019dc:	2b50      	cmp	r3, #80	; 0x50
 80019de:	d033      	beq.n	8001a48 <HAL_TIM_ConfigClockSource+0xe0>
 80019e0:	2b60      	cmp	r3, #96	; 0x60
 80019e2:	d041      	beq.n	8001a68 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80019e4:	e06a      	b.n	8001abc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80019e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019ea:	d066      	beq.n	8001aba <HAL_TIM_ConfigClockSource+0x152>
 80019ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019f0:	d017      	beq.n	8001a22 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80019f2:	e063      	b.n	8001abc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6818      	ldr	r0, [r3, #0]
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	6899      	ldr	r1, [r3, #8]
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685a      	ldr	r2, [r3, #4]
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	f000 fc02 	bl	800220c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001a16:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	68fa      	ldr	r2, [r7, #12]
 8001a1e:	609a      	str	r2, [r3, #8]
      break;
 8001a20:	e04c      	b.n	8001abc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6818      	ldr	r0, [r3, #0]
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	6899      	ldr	r1, [r3, #8]
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	f000 fbeb 	bl	800220c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	689a      	ldr	r2, [r3, #8]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a44:	609a      	str	r2, [r3, #8]
      break;
 8001a46:	e039      	b.n	8001abc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6818      	ldr	r0, [r3, #0]
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	6859      	ldr	r1, [r3, #4]
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	461a      	mov	r2, r3
 8001a56:	f000 faaf 	bl	8001fb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2150      	movs	r1, #80	; 0x50
 8001a60:	4618      	mov	r0, r3
 8001a62:	f000 fbb9 	bl	80021d8 <TIM_ITRx_SetConfig>
      break;
 8001a66:	e029      	b.n	8001abc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6818      	ldr	r0, [r3, #0]
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	6859      	ldr	r1, [r3, #4]
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	461a      	mov	r2, r3
 8001a76:	f000 fb09 	bl	800208c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2160      	movs	r1, #96	; 0x60
 8001a80:	4618      	mov	r0, r3
 8001a82:	f000 fba9 	bl	80021d8 <TIM_ITRx_SetConfig>
      break;
 8001a86:	e019      	b.n	8001abc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6818      	ldr	r0, [r3, #0]
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	6859      	ldr	r1, [r3, #4]
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	461a      	mov	r2, r3
 8001a96:	f000 fa8f 	bl	8001fb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2140      	movs	r1, #64	; 0x40
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f000 fb99 	bl	80021d8 <TIM_ITRx_SetConfig>
      break;
 8001aa6:	e009      	b.n	8001abc <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4610      	mov	r0, r2
 8001ab4:	f000 fb90 	bl	80021d8 <TIM_ITRx_SetConfig>
        break;
 8001ab8:	e000      	b.n	8001abc <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001aba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr

08001ae8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr

08001afa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr

08001b0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr

08001b1e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr

08001b30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a29      	ldr	r2, [pc, #164]	; (8001be8 <TIM_Base_SetConfig+0xb8>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d00b      	beq.n	8001b60 <TIM_Base_SetConfig+0x30>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b4e:	d007      	beq.n	8001b60 <TIM_Base_SetConfig+0x30>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4a26      	ldr	r2, [pc, #152]	; (8001bec <TIM_Base_SetConfig+0xbc>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d003      	beq.n	8001b60 <TIM_Base_SetConfig+0x30>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4a25      	ldr	r2, [pc, #148]	; (8001bf0 <TIM_Base_SetConfig+0xc0>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d108      	bne.n	8001b72 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a1c      	ldr	r2, [pc, #112]	; (8001be8 <TIM_Base_SetConfig+0xb8>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d00b      	beq.n	8001b92 <TIM_Base_SetConfig+0x62>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b80:	d007      	beq.n	8001b92 <TIM_Base_SetConfig+0x62>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a19      	ldr	r2, [pc, #100]	; (8001bec <TIM_Base_SetConfig+0xbc>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d003      	beq.n	8001b92 <TIM_Base_SetConfig+0x62>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a18      	ldr	r2, [pc, #96]	; (8001bf0 <TIM_Base_SetConfig+0xc0>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d108      	bne.n	8001ba4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4a07      	ldr	r2, [pc, #28]	; (8001be8 <TIM_Base_SetConfig+0xb8>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d103      	bne.n	8001bd8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	691a      	ldr	r2, [r3, #16]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	615a      	str	r2, [r3, #20]
}
 8001bde:	bf00      	nop
 8001be0:	3714      	adds	r7, #20
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr
 8001be8:	40012c00 	.word	0x40012c00
 8001bec:	40000400 	.word	0x40000400
 8001bf0:	40000800 	.word	0x40000800

08001bf4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b087      	sub	sp, #28
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a1b      	ldr	r3, [r3, #32]
 8001c02:	f023 0201 	bic.w	r2, r3, #1
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a1b      	ldr	r3, [r3, #32]
 8001c0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f023 0303 	bic.w	r3, r3, #3
 8001c2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	68fa      	ldr	r2, [r7, #12]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	f023 0302 	bic.w	r3, r3, #2
 8001c3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	697a      	ldr	r2, [r7, #20]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a1c      	ldr	r2, [pc, #112]	; (8001cbc <TIM_OC1_SetConfig+0xc8>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d10c      	bne.n	8001c6a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	f023 0308 	bic.w	r3, r3, #8
 8001c56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	f023 0304 	bic.w	r3, r3, #4
 8001c68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a13      	ldr	r2, [pc, #76]	; (8001cbc <TIM_OC1_SetConfig+0xc8>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d111      	bne.n	8001c96 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001c80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685a      	ldr	r2, [r3, #4]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	621a      	str	r2, [r3, #32]
}
 8001cb0:	bf00      	nop
 8001cb2:	371c      	adds	r7, #28
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	40012c00 	.word	0x40012c00

08001cc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b087      	sub	sp, #28
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	f023 0210 	bic.w	r2, r3, #16
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a1b      	ldr	r3, [r3, #32]
 8001cda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	021b      	lsls	r3, r3, #8
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	f023 0320 	bic.w	r3, r3, #32
 8001d0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	011b      	lsls	r3, r3, #4
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a1d      	ldr	r2, [pc, #116]	; (8001d90 <TIM_OC2_SetConfig+0xd0>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d10d      	bne.n	8001d3c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	011b      	lsls	r3, r3, #4
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a14      	ldr	r2, [pc, #80]	; (8001d90 <TIM_OC2_SetConfig+0xd0>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d113      	bne.n	8001d6c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001d52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	695b      	ldr	r3, [r3, #20]
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685a      	ldr	r2, [r3, #4]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	621a      	str	r2, [r3, #32]
}
 8001d86:	bf00      	nop
 8001d88:	371c      	adds	r7, #28
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr
 8001d90:	40012c00 	.word	0x40012c00

08001d94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b087      	sub	sp, #28
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a1b      	ldr	r3, [r3, #32]
 8001da2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a1b      	ldr	r3, [r3, #32]
 8001dae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f023 0303 	bic.w	r3, r3, #3
 8001dca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001ddc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	021b      	lsls	r3, r3, #8
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a1d      	ldr	r2, [pc, #116]	; (8001e64 <TIM_OC3_SetConfig+0xd0>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d10d      	bne.n	8001e0e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001df8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	021b      	lsls	r3, r3, #8
 8001e00:	697a      	ldr	r2, [r7, #20]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a14      	ldr	r2, [pc, #80]	; (8001e64 <TIM_OC3_SetConfig+0xd0>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d113      	bne.n	8001e3e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001e24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	011b      	lsls	r3, r3, #4
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	011b      	lsls	r3, r3, #4
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	621a      	str	r2, [r3, #32]
}
 8001e58:	bf00      	nop
 8001e5a:	371c      	adds	r7, #28
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bc80      	pop	{r7}
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	40012c00 	.word	0x40012c00

08001e68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b087      	sub	sp, #28
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a1b      	ldr	r3, [r3, #32]
 8001e76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a1b      	ldr	r3, [r3, #32]
 8001e82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	021b      	lsls	r3, r3, #8
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001eb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	031b      	lsls	r3, r3, #12
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a0f      	ldr	r2, [pc, #60]	; (8001f00 <TIM_OC4_SetConfig+0x98>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d109      	bne.n	8001edc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ece:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	695b      	ldr	r3, [r3, #20]
 8001ed4:	019b      	lsls	r3, r3, #6
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	621a      	str	r2, [r3, #32]
}
 8001ef6:	bf00      	nop
 8001ef8:	371c      	adds	r7, #28
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr
 8001f00:	40012c00 	.word	0x40012c00

08001f04 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b087      	sub	sp, #28
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
 8001f10:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6a1b      	ldr	r3, [r3, #32]
 8001f16:	f023 0201 	bic.w	r2, r3, #1
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	4a1f      	ldr	r2, [pc, #124]	; (8001fac <TIM_TI1_SetConfig+0xa8>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d00b      	beq.n	8001f4a <TIM_TI1_SetConfig+0x46>
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f38:	d007      	beq.n	8001f4a <TIM_TI1_SetConfig+0x46>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	4a1c      	ldr	r2, [pc, #112]	; (8001fb0 <TIM_TI1_SetConfig+0xac>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d003      	beq.n	8001f4a <TIM_TI1_SetConfig+0x46>
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	4a1b      	ldr	r2, [pc, #108]	; (8001fb4 <TIM_TI1_SetConfig+0xb0>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d101      	bne.n	8001f4e <TIM_TI1_SetConfig+0x4a>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <TIM_TI1_SetConfig+0x4c>
 8001f4e:	2300      	movs	r3, #0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d008      	beq.n	8001f66 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	f023 0303 	bic.w	r3, r3, #3
 8001f5a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8001f5c:	697a      	ldr	r2, [r7, #20]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	617b      	str	r3, [r7, #20]
 8001f64:	e003      	b.n	8001f6e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	011b      	lsls	r3, r3, #4
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	697a      	ldr	r2, [r7, #20]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	f023 030a 	bic.w	r3, r3, #10
 8001f88:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	f003 030a 	and.w	r3, r3, #10
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	621a      	str	r2, [r3, #32]
}
 8001fa2:	bf00      	nop
 8001fa4:	371c      	adds	r7, #28
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bc80      	pop	{r7}
 8001faa:	4770      	bx	lr
 8001fac:	40012c00 	.word	0x40012c00
 8001fb0:	40000400 	.word	0x40000400
 8001fb4:	40000800 	.word	0x40000800

08001fb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b087      	sub	sp, #28
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6a1b      	ldr	r3, [r3, #32]
 8001fce:	f023 0201 	bic.w	r2, r3, #1
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fe2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	011b      	lsls	r3, r3, #4
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	f023 030a 	bic.w	r3, r3, #10
 8001ff4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	621a      	str	r2, [r3, #32]
}
 800200a:	bf00      	nop
 800200c:	371c      	adds	r7, #28
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr

08002014 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002014:	b480      	push	{r7}
 8002016:	b087      	sub	sp, #28
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
 8002020:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6a1b      	ldr	r3, [r3, #32]
 8002026:	f023 0210 	bic.w	r2, r3, #16
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6a1b      	ldr	r3, [r3, #32]
 8002038:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002040:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	021b      	lsls	r3, r3, #8
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	4313      	orrs	r3, r2
 800204a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002052:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	031b      	lsls	r3, r3, #12
 8002058:	b29b      	uxth	r3, r3
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	4313      	orrs	r3, r2
 800205e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002066:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	011b      	lsls	r3, r3, #4
 800206c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	4313      	orrs	r3, r2
 8002074:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	621a      	str	r2, [r3, #32]
}
 8002082:	bf00      	nop
 8002084:	371c      	adds	r7, #28
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr

0800208c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800208c:	b480      	push	{r7}
 800208e:	b087      	sub	sp, #28
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	f023 0210 	bic.w	r2, r3, #16
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6a1b      	ldr	r3, [r3, #32]
 80020ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80020b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	031b      	lsls	r3, r3, #12
 80020bc:	697a      	ldr	r2, [r7, #20]
 80020be:	4313      	orrs	r3, r2
 80020c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80020c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	011b      	lsls	r3, r3, #4
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	621a      	str	r2, [r3, #32]
}
 80020e0:	bf00      	nop
 80020e2:	371c      	adds	r7, #28
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bc80      	pop	{r7}
 80020e8:	4770      	bx	lr

080020ea <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b087      	sub	sp, #28
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	60f8      	str	r0, [r7, #12]
 80020f2:	60b9      	str	r1, [r7, #8]
 80020f4:	607a      	str	r2, [r7, #4]
 80020f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	69db      	ldr	r3, [r3, #28]
 8002108:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6a1b      	ldr	r3, [r3, #32]
 800210e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	f023 0303 	bic.w	r3, r3, #3
 8002116:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002118:	697a      	ldr	r2, [r7, #20]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4313      	orrs	r3, r2
 800211e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002126:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	011b      	lsls	r3, r3, #4
 800212c:	b2db      	uxtb	r3, r3
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	4313      	orrs	r3, r2
 8002132:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800213a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	021b      	lsls	r3, r3, #8
 8002140:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	4313      	orrs	r3, r2
 8002148:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	621a      	str	r2, [r3, #32]
}
 8002156:	bf00      	nop
 8002158:	371c      	adds	r7, #28
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr

08002160 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002160:	b480      	push	{r7}
 8002162:	b087      	sub	sp, #28
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
 800216c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6a1b      	ldr	r3, [r3, #32]
 8002184:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800218c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	021b      	lsls	r3, r3, #8
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	4313      	orrs	r3, r2
 8002196:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800219e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	031b      	lsls	r3, r3, #12
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	697a      	ldr	r2, [r7, #20]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80021b2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	031b      	lsls	r3, r3, #12
 80021b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	4313      	orrs	r3, r2
 80021c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	697a      	ldr	r2, [r7, #20]
 80021c6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	621a      	str	r2, [r3, #32]
}
 80021ce:	bf00      	nop
 80021d0:	371c      	adds	r7, #28
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr

080021d8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ee:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	f043 0307 	orr.w	r3, r3, #7
 80021fa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	609a      	str	r2, [r3, #8]
}
 8002202:	bf00      	nop
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr

0800220c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800220c:	b480      	push	{r7}
 800220e:	b087      	sub	sp, #28
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
 8002218:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002226:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	021a      	lsls	r2, r3, #8
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	431a      	orrs	r2, r3
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	4313      	orrs	r3, r2
 8002234:	697a      	ldr	r2, [r7, #20]
 8002236:	4313      	orrs	r3, r2
 8002238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	609a      	str	r2, [r3, #8]
}
 8002240:	bf00      	nop
 8002242:	371c      	adds	r7, #28
 8002244:	46bd      	mov	sp, r7
 8002246:	bc80      	pop	{r7}
 8002248:	4770      	bx	lr
	...

0800224c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800225c:	2b01      	cmp	r3, #1
 800225e:	d101      	bne.n	8002264 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002260:	2302      	movs	r3, #2
 8002262:	e046      	b.n	80022f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2202      	movs	r2, #2
 8002270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800228a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	4313      	orrs	r3, r2
 8002294:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a16      	ldr	r2, [pc, #88]	; (80022fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d00e      	beq.n	80022c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022b0:	d009      	beq.n	80022c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a12      	ldr	r2, [pc, #72]	; (8002300 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d004      	beq.n	80022c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a10      	ldr	r2, [pc, #64]	; (8002304 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d10c      	bne.n	80022e0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	68ba      	ldr	r2, [r7, #8]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68ba      	ldr	r2, [r7, #8]
 80022de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3714      	adds	r7, #20
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bc80      	pop	{r7}
 80022fa:	4770      	bx	lr
 80022fc:	40012c00 	.word	0x40012c00
 8002300:	40000400 	.word	0x40000400
 8002304:	40000800 	.word	0x40000800

08002308 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	bc80      	pop	{r7}
 8002318:	4770      	bx	lr

0800231a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002322:	bf00      	nop
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	bc80      	pop	{r7}
 800232a:	4770      	bx	lr

0800232c <__libc_init_array>:
 800232c:	b570      	push	{r4, r5, r6, lr}
 800232e:	2500      	movs	r5, #0
 8002330:	4e0c      	ldr	r6, [pc, #48]	; (8002364 <__libc_init_array+0x38>)
 8002332:	4c0d      	ldr	r4, [pc, #52]	; (8002368 <__libc_init_array+0x3c>)
 8002334:	1ba4      	subs	r4, r4, r6
 8002336:	10a4      	asrs	r4, r4, #2
 8002338:	42a5      	cmp	r5, r4
 800233a:	d109      	bne.n	8002350 <__libc_init_array+0x24>
 800233c:	f000 f822 	bl	8002384 <_init>
 8002340:	2500      	movs	r5, #0
 8002342:	4e0a      	ldr	r6, [pc, #40]	; (800236c <__libc_init_array+0x40>)
 8002344:	4c0a      	ldr	r4, [pc, #40]	; (8002370 <__libc_init_array+0x44>)
 8002346:	1ba4      	subs	r4, r4, r6
 8002348:	10a4      	asrs	r4, r4, #2
 800234a:	42a5      	cmp	r5, r4
 800234c:	d105      	bne.n	800235a <__libc_init_array+0x2e>
 800234e:	bd70      	pop	{r4, r5, r6, pc}
 8002350:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002354:	4798      	blx	r3
 8002356:	3501      	adds	r5, #1
 8002358:	e7ee      	b.n	8002338 <__libc_init_array+0xc>
 800235a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800235e:	4798      	blx	r3
 8002360:	3501      	adds	r5, #1
 8002362:	e7f2      	b.n	800234a <__libc_init_array+0x1e>
 8002364:	080023c0 	.word	0x080023c0
 8002368:	080023c0 	.word	0x080023c0
 800236c:	080023c0 	.word	0x080023c0
 8002370:	080023c4 	.word	0x080023c4

08002374 <memset>:
 8002374:	4603      	mov	r3, r0
 8002376:	4402      	add	r2, r0
 8002378:	4293      	cmp	r3, r2
 800237a:	d100      	bne.n	800237e <memset+0xa>
 800237c:	4770      	bx	lr
 800237e:	f803 1b01 	strb.w	r1, [r3], #1
 8002382:	e7f9      	b.n	8002378 <memset+0x4>

08002384 <_init>:
 8002384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002386:	bf00      	nop
 8002388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800238a:	bc08      	pop	{r3}
 800238c:	469e      	mov	lr, r3
 800238e:	4770      	bx	lr

08002390 <_fini>:
 8002390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002392:	bf00      	nop
 8002394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002396:	bc08      	pop	{r3}
 8002398:	469e      	mov	lr, r3
 800239a:	4770      	bx	lr
