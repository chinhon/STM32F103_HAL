
RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d9c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08001ea8  08001ea8  00011ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ee0  08001ee0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001ee0  08001ee0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ee0  08001ee0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ee0  08001ee0  00011ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001ee4  08001ee4  00011ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001ee8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  2000000c  08001ef4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000048  08001ef4  00020048  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000048f4  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001472  00000000  00000000  00024929  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005e8  00000000  00000000  00025da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000530  00000000  00000000  00026388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000160f4  00000000  00000000  000268b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006837  00000000  00000000  0003c9ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007dd3d  00000000  00000000  000431e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c0f20  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000015b4  00000000  00000000  000c0f70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001e90 	.word	0x08001e90

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001e90 	.word	0x08001e90

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 f9bc 	bl	80004cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f816 	bl	8000184 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8e6 	bl	8000328 <MX_GPIO_Init>
  MX_RTC_Init();
 800015c:	f000 f866 	bl	800022c <MX_RTC_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8000160:	2201      	movs	r2, #1
 8000162:	4905      	ldr	r1, [pc, #20]	; (8000178 <main+0x2c>)
 8000164:	4805      	ldr	r0, [pc, #20]	; (800017c <main+0x30>)
 8000166:	f001 f9ad 	bl	80014c4 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 800016a:	2201      	movs	r2, #1
 800016c:	4904      	ldr	r1, [pc, #16]	; (8000180 <main+0x34>)
 800016e:	4803      	ldr	r0, [pc, #12]	; (800017c <main+0x30>)
 8000170:	f001 fb36 	bl	80017e0 <HAL_RTC_GetDate>
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8000174:	e7f4      	b.n	8000160 <main+0x14>
 8000176:	bf00      	nop
 8000178:	2000003c 	.word	0x2000003c
 800017c:	20000028 	.word	0x20000028
 8000180:	20000040 	.word	0x20000040

08000184 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b094      	sub	sp, #80	; 0x50
 8000188:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800018a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800018e:	2228      	movs	r2, #40	; 0x28
 8000190:	2100      	movs	r1, #0
 8000192:	4618      	mov	r0, r3
 8000194:	f001 fe74 	bl	8001e80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000198:	f107 0314 	add.w	r3, r7, #20
 800019c:	2200      	movs	r2, #0
 800019e:	601a      	str	r2, [r3, #0]
 80001a0:	605a      	str	r2, [r3, #4]
 80001a2:	609a      	str	r2, [r3, #8]
 80001a4:	60da      	str	r2, [r3, #12]
 80001a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001a8:	1d3b      	adds	r3, r7, #4
 80001aa:	2200      	movs	r2, #0
 80001ac:	601a      	str	r2, [r3, #0]
 80001ae:	605a      	str	r2, [r3, #4]
 80001b0:	609a      	str	r2, [r3, #8]
 80001b2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80001b4:	2303      	movs	r3, #3
 80001b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001be:	2301      	movs	r3, #1
 80001c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001c2:	2310      	movs	r3, #16
 80001c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001c6:	2300      	movs	r3, #0
 80001c8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001ce:	4618      	mov	r0, r3
 80001d0:	f000 face 	bl	8000770 <HAL_RCC_OscConfig>
 80001d4:	4603      	mov	r3, r0
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d001      	beq.n	80001de <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80001da:	f000 f8c7 	bl	800036c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001de:	230f      	movs	r3, #15
 80001e0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001e2:	2300      	movs	r3, #0
 80001e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001e6:	2300      	movs	r3, #0
 80001e8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001ea:	2300      	movs	r3, #0
 80001ec:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001ee:	2300      	movs	r3, #0
 80001f0:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001f2:	f107 0314 	add.w	r3, r7, #20
 80001f6:	2100      	movs	r1, #0
 80001f8:	4618      	mov	r0, r3
 80001fa:	f000 fd3b 	bl	8000c74 <HAL_RCC_ClockConfig>
 80001fe:	4603      	mov	r3, r0
 8000200:	2b00      	cmp	r3, #0
 8000202:	d001      	beq.n	8000208 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000204:	f000 f8b2 	bl	800036c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000208:	2301      	movs	r3, #1
 800020a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV128;
 800020c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000210:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000212:	1d3b      	adds	r3, r7, #4
 8000214:	4618      	mov	r0, r3
 8000216:	f000 feb1 	bl	8000f7c <HAL_RCCEx_PeriphCLKConfig>
 800021a:	4603      	mov	r3, r0
 800021c:	2b00      	cmp	r3, #0
 800021e:	d001      	beq.n	8000224 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000220:	f000 f8a4 	bl	800036c <Error_Handler>
  }
}
 8000224:	bf00      	nop
 8000226:	3750      	adds	r7, #80	; 0x50
 8000228:	46bd      	mov	sp, r7
 800022a:	bd80      	pop	{r7, pc}

0800022c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	2100      	movs	r1, #0
 8000236:	460a      	mov	r2, r1
 8000238:	801a      	strh	r2, [r3, #0]
 800023a:	460a      	mov	r2, r1
 800023c:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800023e:	2300      	movs	r3, #0
 8000240:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000242:	4b37      	ldr	r3, [pc, #220]	; (8000320 <MX_RTC_Init+0xf4>)
 8000244:	4a37      	ldr	r2, [pc, #220]	; (8000324 <MX_RTC_Init+0xf8>)
 8000246:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000248:	4b35      	ldr	r3, [pc, #212]	; (8000320 <MX_RTC_Init+0xf4>)
 800024a:	f04f 32ff 	mov.w	r2, #4294967295
 800024e:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000250:	4b33      	ldr	r3, [pc, #204]	; (8000320 <MX_RTC_Init+0xf4>)
 8000252:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000256:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000258:	4831      	ldr	r0, [pc, #196]	; (8000320 <MX_RTC_Init+0xf4>)
 800025a:	f001 f805 	bl	8001268 <HAL_RTC_Init>
 800025e:	4603      	mov	r3, r0
 8000260:	2b00      	cmp	r3, #0
 8000262:	d001      	beq.n	8000268 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8000264:	f000 f882 	bl	800036c <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1)== 0x2608)
 8000268:	2101      	movs	r1, #1
 800026a:	482d      	ldr	r0, [pc, #180]	; (8000320 <MX_RTC_Init+0xf4>)
 800026c:	f001 fdc8 	bl	8001e00 <HAL_RTCEx_BKUPRead>
 8000270:	4603      	mov	r3, r0
 8000272:	f242 6208 	movw	r2, #9736	; 0x2608
 8000276:	4293      	cmp	r3, r2
 8000278:	d129      	bne.n	80002ce <MX_RTC_Init+0xa2>
  {
	  sTime.Hours = 14;
 800027a:	230e      	movs	r3, #14
 800027c:	713b      	strb	r3, [r7, #4]
	    sTime.Minutes = 30;
 800027e:	231e      	movs	r3, #30
 8000280:	717b      	strb	r3, [r7, #5]
	    sTime.Seconds = 0;
 8000282:	2300      	movs	r3, #0
 8000284:	71bb      	strb	r3, [r7, #6]

	    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	2201      	movs	r2, #1
 800028a:	4619      	mov	r1, r3
 800028c:	4824      	ldr	r0, [pc, #144]	; (8000320 <MX_RTC_Init+0xf4>)
 800028e:	f001 f881 	bl	8001394 <HAL_RTC_SetTime>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <MX_RTC_Init+0x70>
	    {
	      Error_Handler();
 8000298:	f000 f868 	bl	800036c <Error_Handler>
	    }
	    DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 800029c:	2301      	movs	r3, #1
 800029e:	703b      	strb	r3, [r7, #0]
	    DateToUpdate.Month = RTC_MONTH_JANUARY;
 80002a0:	2301      	movs	r3, #1
 80002a2:	707b      	strb	r3, [r7, #1]
	    DateToUpdate.Date = 2;
 80002a4:	2302      	movs	r3, #2
 80002a6:	70bb      	strb	r3, [r7, #2]
	    DateToUpdate.Year = 22;
 80002a8:	2316      	movs	r3, #22
 80002aa:	70fb      	strb	r3, [r7, #3]

	    if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80002ac:	463b      	mov	r3, r7
 80002ae:	2201      	movs	r2, #1
 80002b0:	4619      	mov	r1, r3
 80002b2:	481b      	ldr	r0, [pc, #108]	; (8000320 <MX_RTC_Init+0xf4>)
 80002b4:	f001 f9de 	bl	8001674 <HAL_RTC_SetDate>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <MX_RTC_Init+0x96>
	    {
	      Error_Handler();
 80002be:	f000 f855 	bl	800036c <Error_Handler>
	    }
	    HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x2608);
 80002c2:	f242 6208 	movw	r2, #9736	; 0x2608
 80002c6:	2101      	movs	r1, #1
 80002c8:	4815      	ldr	r0, [pc, #84]	; (8000320 <MX_RTC_Init+0xf4>)
 80002ca:	f001 fd7f 	bl	8001dcc <HAL_RTCEx_BKUPWrite>
  }
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80002ce:	2300      	movs	r3, #0
 80002d0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80002d2:	2300      	movs	r3, #0
 80002d4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80002d6:	2300      	movs	r3, #0
 80002d8:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	2201      	movs	r2, #1
 80002de:	4619      	mov	r1, r3
 80002e0:	480f      	ldr	r0, [pc, #60]	; (8000320 <MX_RTC_Init+0xf4>)
 80002e2:	f001 f857 	bl	8001394 <HAL_RTC_SetTime>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 80002ec:	f000 f83e 	bl	800036c <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80002f0:	2301      	movs	r3, #1
 80002f2:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80002f4:	2301      	movs	r3, #1
 80002f6:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 80002f8:	2301      	movs	r3, #1
 80002fa:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 80002fc:	2300      	movs	r3, #0
 80002fe:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000300:	463b      	mov	r3, r7
 8000302:	2201      	movs	r2, #1
 8000304:	4619      	mov	r1, r3
 8000306:	4806      	ldr	r0, [pc, #24]	; (8000320 <MX_RTC_Init+0xf4>)
 8000308:	f001 f9b4 	bl	8001674 <HAL_RTC_SetDate>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <MX_RTC_Init+0xea>
  {
    Error_Handler();
 8000312:	f000 f82b 	bl	800036c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000316:	bf00      	nop
 8000318:	3708      	adds	r7, #8
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	20000028 	.word	0x20000028
 8000324:	40002800 	.word	0x40002800

08000328 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800032e:	4b0e      	ldr	r3, [pc, #56]	; (8000368 <MX_GPIO_Init+0x40>)
 8000330:	699b      	ldr	r3, [r3, #24]
 8000332:	4a0d      	ldr	r2, [pc, #52]	; (8000368 <MX_GPIO_Init+0x40>)
 8000334:	f043 0320 	orr.w	r3, r3, #32
 8000338:	6193      	str	r3, [r2, #24]
 800033a:	4b0b      	ldr	r3, [pc, #44]	; (8000368 <MX_GPIO_Init+0x40>)
 800033c:	699b      	ldr	r3, [r3, #24]
 800033e:	f003 0320 	and.w	r3, r3, #32
 8000342:	607b      	str	r3, [r7, #4]
 8000344:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000346:	4b08      	ldr	r3, [pc, #32]	; (8000368 <MX_GPIO_Init+0x40>)
 8000348:	699b      	ldr	r3, [r3, #24]
 800034a:	4a07      	ldr	r2, [pc, #28]	; (8000368 <MX_GPIO_Init+0x40>)
 800034c:	f043 0304 	orr.w	r3, r3, #4
 8000350:	6193      	str	r3, [r2, #24]
 8000352:	4b05      	ldr	r3, [pc, #20]	; (8000368 <MX_GPIO_Init+0x40>)
 8000354:	699b      	ldr	r3, [r3, #24]
 8000356:	f003 0304 	and.w	r3, r3, #4
 800035a:	603b      	str	r3, [r7, #0]
 800035c:	683b      	ldr	r3, [r7, #0]

}
 800035e:	bf00      	nop
 8000360:	370c      	adds	r7, #12
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr
 8000368:	40021000 	.word	0x40021000

0800036c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000370:	b672      	cpsid	i
}
 8000372:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000374:	e7fe      	b.n	8000374 <Error_Handler+0x8>
	...

08000378 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000378:	b480      	push	{r7}
 800037a:	b085      	sub	sp, #20
 800037c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800037e:	4b15      	ldr	r3, [pc, #84]	; (80003d4 <HAL_MspInit+0x5c>)
 8000380:	699b      	ldr	r3, [r3, #24]
 8000382:	4a14      	ldr	r2, [pc, #80]	; (80003d4 <HAL_MspInit+0x5c>)
 8000384:	f043 0301 	orr.w	r3, r3, #1
 8000388:	6193      	str	r3, [r2, #24]
 800038a:	4b12      	ldr	r3, [pc, #72]	; (80003d4 <HAL_MspInit+0x5c>)
 800038c:	699b      	ldr	r3, [r3, #24]
 800038e:	f003 0301 	and.w	r3, r3, #1
 8000392:	60bb      	str	r3, [r7, #8]
 8000394:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000396:	4b0f      	ldr	r3, [pc, #60]	; (80003d4 <HAL_MspInit+0x5c>)
 8000398:	69db      	ldr	r3, [r3, #28]
 800039a:	4a0e      	ldr	r2, [pc, #56]	; (80003d4 <HAL_MspInit+0x5c>)
 800039c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003a0:	61d3      	str	r3, [r2, #28]
 80003a2:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <HAL_MspInit+0x5c>)
 80003a4:	69db      	ldr	r3, [r3, #28]
 80003a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003aa:	607b      	str	r3, [r7, #4]
 80003ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003ae:	4b0a      	ldr	r3, [pc, #40]	; (80003d8 <HAL_MspInit+0x60>)
 80003b0:	685b      	ldr	r3, [r3, #4]
 80003b2:	60fb      	str	r3, [r7, #12]
 80003b4:	68fb      	ldr	r3, [r7, #12]
 80003b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003ba:	60fb      	str	r3, [r7, #12]
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003c2:	60fb      	str	r3, [r7, #12]
 80003c4:	4a04      	ldr	r2, [pc, #16]	; (80003d8 <HAL_MspInit+0x60>)
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ca:	bf00      	nop
 80003cc:	3714      	adds	r7, #20
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bc80      	pop	{r7}
 80003d2:	4770      	bx	lr
 80003d4:	40021000 	.word	0x40021000
 80003d8:	40010000 	.word	0x40010000

080003dc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b084      	sub	sp, #16
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4a0b      	ldr	r2, [pc, #44]	; (8000418 <HAL_RTC_MspInit+0x3c>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d110      	bne.n	8000410 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80003ee:	f000 f9b3 	bl	8000758 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80003f2:	4b0a      	ldr	r3, [pc, #40]	; (800041c <HAL_RTC_MspInit+0x40>)
 80003f4:	69db      	ldr	r3, [r3, #28]
 80003f6:	4a09      	ldr	r2, [pc, #36]	; (800041c <HAL_RTC_MspInit+0x40>)
 80003f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80003fc:	61d3      	str	r3, [r2, #28]
 80003fe:	4b07      	ldr	r3, [pc, #28]	; (800041c <HAL_RTC_MspInit+0x40>)
 8000400:	69db      	ldr	r3, [r3, #28]
 8000402:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000406:	60fb      	str	r3, [r7, #12]
 8000408:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800040a:	4b05      	ldr	r3, [pc, #20]	; (8000420 <HAL_RTC_MspInit+0x44>)
 800040c:	2201      	movs	r2, #1
 800040e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000410:	bf00      	nop
 8000412:	3710      	adds	r7, #16
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	40002800 	.word	0x40002800
 800041c:	40021000 	.word	0x40021000
 8000420:	4242043c 	.word	0x4242043c

08000424 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000428:	e7fe      	b.n	8000428 <NMI_Handler+0x4>

0800042a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800042a:	b480      	push	{r7}
 800042c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800042e:	e7fe      	b.n	800042e <HardFault_Handler+0x4>

08000430 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000434:	e7fe      	b.n	8000434 <MemManage_Handler+0x4>

08000436 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000436:	b480      	push	{r7}
 8000438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800043a:	e7fe      	b.n	800043a <BusFault_Handler+0x4>

0800043c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000440:	e7fe      	b.n	8000440 <UsageFault_Handler+0x4>

08000442 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000442:	b480      	push	{r7}
 8000444:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000446:	bf00      	nop
 8000448:	46bd      	mov	sp, r7
 800044a:	bc80      	pop	{r7}
 800044c:	4770      	bx	lr

0800044e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800044e:	b480      	push	{r7}
 8000450:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000452:	bf00      	nop
 8000454:	46bd      	mov	sp, r7
 8000456:	bc80      	pop	{r7}
 8000458:	4770      	bx	lr

0800045a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800045a:	b480      	push	{r7}
 800045c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800045e:	bf00      	nop
 8000460:	46bd      	mov	sp, r7
 8000462:	bc80      	pop	{r7}
 8000464:	4770      	bx	lr

08000466 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000466:	b580      	push	{r7, lr}
 8000468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800046a:	f000 f875 	bl	8000558 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800046e:	bf00      	nop
 8000470:	bd80      	pop	{r7, pc}

08000472 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000472:	b480      	push	{r7}
 8000474:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000476:	bf00      	nop
 8000478:	46bd      	mov	sp, r7
 800047a:	bc80      	pop	{r7}
 800047c:	4770      	bx	lr
	...

08000480 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000480:	480c      	ldr	r0, [pc, #48]	; (80004b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000482:	490d      	ldr	r1, [pc, #52]	; (80004b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000484:	4a0d      	ldr	r2, [pc, #52]	; (80004bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000486:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000488:	e002      	b.n	8000490 <LoopCopyDataInit>

0800048a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800048a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800048c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800048e:	3304      	adds	r3, #4

08000490 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000490:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000492:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000494:	d3f9      	bcc.n	800048a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000496:	4a0a      	ldr	r2, [pc, #40]	; (80004c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000498:	4c0a      	ldr	r4, [pc, #40]	; (80004c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800049a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800049c:	e001      	b.n	80004a2 <LoopFillZerobss>

0800049e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800049e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004a0:	3204      	adds	r2, #4

080004a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004a4:	d3fb      	bcc.n	800049e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80004a6:	f7ff ffe4 	bl	8000472 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004aa:	f001 fcc5 	bl	8001e38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004ae:	f7ff fe4d 	bl	800014c <main>
  bx lr
 80004b2:	4770      	bx	lr
  ldr r0, =_sdata
 80004b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004b8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80004bc:	08001ee8 	.word	0x08001ee8
  ldr r2, =_sbss
 80004c0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80004c4:	20000048 	.word	0x20000048

080004c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004c8:	e7fe      	b.n	80004c8 <ADC1_2_IRQHandler>
	...

080004cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004d0:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <HAL_Init+0x28>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a07      	ldr	r2, [pc, #28]	; (80004f4 <HAL_Init+0x28>)
 80004d6:	f043 0310 	orr.w	r3, r3, #16
 80004da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004dc:	2003      	movs	r0, #3
 80004de:	f000 f907 	bl	80006f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004e2:	200f      	movs	r0, #15
 80004e4:	f000 f808 	bl	80004f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004e8:	f7ff ff46 	bl	8000378 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004ec:	2300      	movs	r3, #0
}
 80004ee:	4618      	mov	r0, r3
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	40022000 	.word	0x40022000

080004f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000500:	4b12      	ldr	r3, [pc, #72]	; (800054c <HAL_InitTick+0x54>)
 8000502:	681a      	ldr	r2, [r3, #0]
 8000504:	4b12      	ldr	r3, [pc, #72]	; (8000550 <HAL_InitTick+0x58>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	4619      	mov	r1, r3
 800050a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800050e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000512:	fbb2 f3f3 	udiv	r3, r2, r3
 8000516:	4618      	mov	r0, r3
 8000518:	f000 f911 	bl	800073e <HAL_SYSTICK_Config>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000522:	2301      	movs	r3, #1
 8000524:	e00e      	b.n	8000544 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	2b0f      	cmp	r3, #15
 800052a:	d80a      	bhi.n	8000542 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800052c:	2200      	movs	r2, #0
 800052e:	6879      	ldr	r1, [r7, #4]
 8000530:	f04f 30ff 	mov.w	r0, #4294967295
 8000534:	f000 f8e7 	bl	8000706 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000538:	4a06      	ldr	r2, [pc, #24]	; (8000554 <HAL_InitTick+0x5c>)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800053e:	2300      	movs	r3, #0
 8000540:	e000      	b.n	8000544 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000542:	2301      	movs	r3, #1
}
 8000544:	4618      	mov	r0, r3
 8000546:	3708      	adds	r7, #8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	20000000 	.word	0x20000000
 8000550:	20000008 	.word	0x20000008
 8000554:	20000004 	.word	0x20000004

08000558 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800055c:	4b05      	ldr	r3, [pc, #20]	; (8000574 <HAL_IncTick+0x1c>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	461a      	mov	r2, r3
 8000562:	4b05      	ldr	r3, [pc, #20]	; (8000578 <HAL_IncTick+0x20>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4413      	add	r3, r2
 8000568:	4a03      	ldr	r2, [pc, #12]	; (8000578 <HAL_IncTick+0x20>)
 800056a:	6013      	str	r3, [r2, #0]
}
 800056c:	bf00      	nop
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr
 8000574:	20000008 	.word	0x20000008
 8000578:	20000044 	.word	0x20000044

0800057c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  return uwTick;
 8000580:	4b02      	ldr	r3, [pc, #8]	; (800058c <HAL_GetTick+0x10>)
 8000582:	681b      	ldr	r3, [r3, #0]
}
 8000584:	4618      	mov	r0, r3
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr
 800058c:	20000044 	.word	0x20000044

08000590 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	f003 0307 	and.w	r3, r3, #7
 800059e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005a0:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <__NVIC_SetPriorityGrouping+0x44>)
 80005a2:	68db      	ldr	r3, [r3, #12]
 80005a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005a6:	68ba      	ldr	r2, [r7, #8]
 80005a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005ac:	4013      	ands	r3, r2
 80005ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005c2:	4a04      	ldr	r2, [pc, #16]	; (80005d4 <__NVIC_SetPriorityGrouping+0x44>)
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	60d3      	str	r3, [r2, #12]
}
 80005c8:	bf00      	nop
 80005ca:	3714      	adds	r7, #20
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bc80      	pop	{r7}
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	e000ed00 	.word	0xe000ed00

080005d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005dc:	4b04      	ldr	r3, [pc, #16]	; (80005f0 <__NVIC_GetPriorityGrouping+0x18>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	0a1b      	lsrs	r3, r3, #8
 80005e2:	f003 0307 	and.w	r3, r3, #7
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bc80      	pop	{r7}
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	e000ed00 	.word	0xe000ed00

080005f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	6039      	str	r1, [r7, #0]
 80005fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000604:	2b00      	cmp	r3, #0
 8000606:	db0a      	blt.n	800061e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	b2da      	uxtb	r2, r3
 800060c:	490c      	ldr	r1, [pc, #48]	; (8000640 <__NVIC_SetPriority+0x4c>)
 800060e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000612:	0112      	lsls	r2, r2, #4
 8000614:	b2d2      	uxtb	r2, r2
 8000616:	440b      	add	r3, r1
 8000618:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800061c:	e00a      	b.n	8000634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	b2da      	uxtb	r2, r3
 8000622:	4908      	ldr	r1, [pc, #32]	; (8000644 <__NVIC_SetPriority+0x50>)
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	f003 030f 	and.w	r3, r3, #15
 800062a:	3b04      	subs	r3, #4
 800062c:	0112      	lsls	r2, r2, #4
 800062e:	b2d2      	uxtb	r2, r2
 8000630:	440b      	add	r3, r1
 8000632:	761a      	strb	r2, [r3, #24]
}
 8000634:	bf00      	nop
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	bc80      	pop	{r7}
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	e000e100 	.word	0xe000e100
 8000644:	e000ed00 	.word	0xe000ed00

08000648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000648:	b480      	push	{r7}
 800064a:	b089      	sub	sp, #36	; 0x24
 800064c:	af00      	add	r7, sp, #0
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	f003 0307 	and.w	r3, r3, #7
 800065a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800065c:	69fb      	ldr	r3, [r7, #28]
 800065e:	f1c3 0307 	rsb	r3, r3, #7
 8000662:	2b04      	cmp	r3, #4
 8000664:	bf28      	it	cs
 8000666:	2304      	movcs	r3, #4
 8000668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800066a:	69fb      	ldr	r3, [r7, #28]
 800066c:	3304      	adds	r3, #4
 800066e:	2b06      	cmp	r3, #6
 8000670:	d902      	bls.n	8000678 <NVIC_EncodePriority+0x30>
 8000672:	69fb      	ldr	r3, [r7, #28]
 8000674:	3b03      	subs	r3, #3
 8000676:	e000      	b.n	800067a <NVIC_EncodePriority+0x32>
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800067c:	f04f 32ff 	mov.w	r2, #4294967295
 8000680:	69bb      	ldr	r3, [r7, #24]
 8000682:	fa02 f303 	lsl.w	r3, r2, r3
 8000686:	43da      	mvns	r2, r3
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	401a      	ands	r2, r3
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000690:	f04f 31ff 	mov.w	r1, #4294967295
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	fa01 f303 	lsl.w	r3, r1, r3
 800069a:	43d9      	mvns	r1, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a0:	4313      	orrs	r3, r2
         );
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3724      	adds	r7, #36	; 0x24
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bc80      	pop	{r7}
 80006aa:	4770      	bx	lr

080006ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	3b01      	subs	r3, #1
 80006b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006bc:	d301      	bcc.n	80006c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006be:	2301      	movs	r3, #1
 80006c0:	e00f      	b.n	80006e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006c2:	4a0a      	ldr	r2, [pc, #40]	; (80006ec <SysTick_Config+0x40>)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	3b01      	subs	r3, #1
 80006c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006ca:	210f      	movs	r1, #15
 80006cc:	f04f 30ff 	mov.w	r0, #4294967295
 80006d0:	f7ff ff90 	bl	80005f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006d4:	4b05      	ldr	r3, [pc, #20]	; (80006ec <SysTick_Config+0x40>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006da:	4b04      	ldr	r3, [pc, #16]	; (80006ec <SysTick_Config+0x40>)
 80006dc:	2207      	movs	r2, #7
 80006de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006e0:	2300      	movs	r3, #0
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	e000e010 	.word	0xe000e010

080006f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006f8:	6878      	ldr	r0, [r7, #4]
 80006fa:	f7ff ff49 	bl	8000590 <__NVIC_SetPriorityGrouping>
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}

08000706 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000706:	b580      	push	{r7, lr}
 8000708:	b086      	sub	sp, #24
 800070a:	af00      	add	r7, sp, #0
 800070c:	4603      	mov	r3, r0
 800070e:	60b9      	str	r1, [r7, #8]
 8000710:	607a      	str	r2, [r7, #4]
 8000712:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000718:	f7ff ff5e 	bl	80005d8 <__NVIC_GetPriorityGrouping>
 800071c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800071e:	687a      	ldr	r2, [r7, #4]
 8000720:	68b9      	ldr	r1, [r7, #8]
 8000722:	6978      	ldr	r0, [r7, #20]
 8000724:	f7ff ff90 	bl	8000648 <NVIC_EncodePriority>
 8000728:	4602      	mov	r2, r0
 800072a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800072e:	4611      	mov	r1, r2
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff ff5f 	bl	80005f4 <__NVIC_SetPriority>
}
 8000736:	bf00      	nop
 8000738:	3718      	adds	r7, #24
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800073e:	b580      	push	{r7, lr}
 8000740:	b082      	sub	sp, #8
 8000742:	af00      	add	r7, sp, #0
 8000744:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	f7ff ffb0 	bl	80006ac <SysTick_Config>
 800074c:	4603      	mov	r3, r0
}
 800074e:	4618      	mov	r0, r3
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
	...

08000758 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800075c:	4b03      	ldr	r3, [pc, #12]	; (800076c <HAL_PWR_EnableBkUpAccess+0x14>)
 800075e:	2201      	movs	r2, #1
 8000760:	601a      	str	r2, [r3, #0]
}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	bc80      	pop	{r7}
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	420e0020 	.word	0x420e0020

08000770 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d101      	bne.n	8000782 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800077e:	2301      	movs	r3, #1
 8000780:	e272      	b.n	8000c68 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	2b00      	cmp	r3, #0
 800078c:	f000 8087 	beq.w	800089e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000790:	4b92      	ldr	r3, [pc, #584]	; (80009dc <HAL_RCC_OscConfig+0x26c>)
 8000792:	685b      	ldr	r3, [r3, #4]
 8000794:	f003 030c 	and.w	r3, r3, #12
 8000798:	2b04      	cmp	r3, #4
 800079a:	d00c      	beq.n	80007b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800079c:	4b8f      	ldr	r3, [pc, #572]	; (80009dc <HAL_RCC_OscConfig+0x26c>)
 800079e:	685b      	ldr	r3, [r3, #4]
 80007a0:	f003 030c 	and.w	r3, r3, #12
 80007a4:	2b08      	cmp	r3, #8
 80007a6:	d112      	bne.n	80007ce <HAL_RCC_OscConfig+0x5e>
 80007a8:	4b8c      	ldr	r3, [pc, #560]	; (80009dc <HAL_RCC_OscConfig+0x26c>)
 80007aa:	685b      	ldr	r3, [r3, #4]
 80007ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007b4:	d10b      	bne.n	80007ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007b6:	4b89      	ldr	r3, [pc, #548]	; (80009dc <HAL_RCC_OscConfig+0x26c>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d06c      	beq.n	800089c <HAL_RCC_OscConfig+0x12c>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	685b      	ldr	r3, [r3, #4]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d168      	bne.n	800089c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80007ca:	2301      	movs	r3, #1
 80007cc:	e24c      	b.n	8000c68 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007d6:	d106      	bne.n	80007e6 <HAL_RCC_OscConfig+0x76>
 80007d8:	4b80      	ldr	r3, [pc, #512]	; (80009dc <HAL_RCC_OscConfig+0x26c>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a7f      	ldr	r2, [pc, #508]	; (80009dc <HAL_RCC_OscConfig+0x26c>)
 80007de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007e2:	6013      	str	r3, [r2, #0]
 80007e4:	e02e      	b.n	8000844 <HAL_RCC_OscConfig+0xd4>
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	685b      	ldr	r3, [r3, #4]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d10c      	bne.n	8000808 <HAL_RCC_OscConfig+0x98>
 80007ee:	4b7b      	ldr	r3, [pc, #492]	; (80009dc <HAL_RCC_OscConfig+0x26c>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4a7a      	ldr	r2, [pc, #488]	; (80009dc <HAL_RCC_OscConfig+0x26c>)
 80007f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007f8:	6013      	str	r3, [r2, #0]
 80007fa:	4b78      	ldr	r3, [pc, #480]	; (80009dc <HAL_RCC_OscConfig+0x26c>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4a77      	ldr	r2, [pc, #476]	; (80009dc <HAL_RCC_OscConfig+0x26c>)
 8000800:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000804:	6013      	str	r3, [r2, #0]
 8000806:	e01d      	b.n	8000844 <HAL_RCC_OscConfig+0xd4>
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	685b      	ldr	r3, [r3, #4]
 800080c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000810:	d10c      	bne.n	800082c <HAL_RCC_OscConfig+0xbc>
 8000812:	4b72      	ldr	r3, [pc, #456]	; (80009dc <HAL_RCC_OscConfig+0x26c>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a71      	ldr	r2, [pc, #452]	; (80009dc <HAL_RCC_OscConfig+0x26c>)
 8000818:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800081c:	6013      	str	r3, [r2, #0]
 800081e:	4b6f      	ldr	r3, [pc, #444]	; (80009dc <HAL_RCC_OscConfig+0x26c>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a6e      	ldr	r2, [pc, #440]	; (80009dc <HAL_RCC_OscConfig+0x26c>)
 8000824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000828:	6013      	str	r3, [r2, #0]
 800082a:	e00b      	b.n	8000844 <HAL_RCC_OscConfig+0xd4>
 800082c:	4b6b      	ldr	r3, [pc, #428]	; (80009dc <HAL_RCC_OscConfig+0x26c>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a6a      	ldr	r2, [pc, #424]	; (80009dc <HAL_RCC_OscConfig+0x26c>)
 8000832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000836:	6013      	str	r3, [r2, #0]
 8000838:	4b68      	ldr	r3, [pc, #416]	; (80009dc <HAL_RCC_OscConfig+0x26c>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a67      	ldr	r2, [pc, #412]	; (80009dc <HAL_RCC_OscConfig+0x26c>)
 800083e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000842:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d013      	beq.n	8000874 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800084c:	f7ff fe96 	bl	800057c <HAL_GetTick>
 8000850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000852:	e008      	b.n	8000866 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000854:	f7ff fe92 	bl	800057c <HAL_GetTick>
 8000858:	4602      	mov	r2, r0
 800085a:	693b      	ldr	r3, [r7, #16]
 800085c:	1ad3      	subs	r3, r2, r3
 800085e:	2b64      	cmp	r3, #100	; 0x64
 8000860:	d901      	bls.n	8000866 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000862:	2303      	movs	r3, #3
 8000864:	e200      	b.n	8000c68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000866:	4b5d      	ldr	r3, [pc, #372]	; (80009dc <HAL_RCC_OscConfig+0x26c>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800086e:	2b00      	cmp	r3, #0
 8000870:	d0f0      	beq.n	8000854 <HAL_RCC_OscConfig+0xe4>
 8000872:	e014      	b.n	800089e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000874:	f7ff fe82 	bl	800057c <HAL_GetTick>
 8000878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800087a:	e008      	b.n	800088e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800087c:	f7ff fe7e 	bl	800057c <HAL_GetTick>
 8000880:	4602      	mov	r2, r0
 8000882:	693b      	ldr	r3, [r7, #16]
 8000884:	1ad3      	subs	r3, r2, r3
 8000886:	2b64      	cmp	r3, #100	; 0x64
 8000888:	d901      	bls.n	800088e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800088a:	2303      	movs	r3, #3
 800088c:	e1ec      	b.n	8000c68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800088e:	4b53      	ldr	r3, [pc, #332]	; (80009dc <HAL_RCC_OscConfig+0x26c>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000896:	2b00      	cmp	r3, #0
 8000898:	d1f0      	bne.n	800087c <HAL_RCC_OscConfig+0x10c>
 800089a:	e000      	b.n	800089e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800089c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f003 0302 	and.w	r3, r3, #2
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d063      	beq.n	8000972 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80008aa:	4b4c      	ldr	r3, [pc, #304]	; (80009dc <HAL_RCC_OscConfig+0x26c>)
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	f003 030c 	and.w	r3, r3, #12
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d00b      	beq.n	80008ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80008b6:	4b49      	ldr	r3, [pc, #292]	; (80009dc <HAL_RCC_OscConfig+0x26c>)
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	f003 030c 	and.w	r3, r3, #12
 80008be:	2b08      	cmp	r3, #8
 80008c0:	d11c      	bne.n	80008fc <HAL_RCC_OscConfig+0x18c>
 80008c2:	4b46      	ldr	r3, [pc, #280]	; (80009dc <HAL_RCC_OscConfig+0x26c>)
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d116      	bne.n	80008fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008ce:	4b43      	ldr	r3, [pc, #268]	; (80009dc <HAL_RCC_OscConfig+0x26c>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f003 0302 	and.w	r3, r3, #2
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d005      	beq.n	80008e6 <HAL_RCC_OscConfig+0x176>
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	691b      	ldr	r3, [r3, #16]
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d001      	beq.n	80008e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80008e2:	2301      	movs	r3, #1
 80008e4:	e1c0      	b.n	8000c68 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008e6:	4b3d      	ldr	r3, [pc, #244]	; (80009dc <HAL_RCC_OscConfig+0x26c>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	695b      	ldr	r3, [r3, #20]
 80008f2:	00db      	lsls	r3, r3, #3
 80008f4:	4939      	ldr	r1, [pc, #228]	; (80009dc <HAL_RCC_OscConfig+0x26c>)
 80008f6:	4313      	orrs	r3, r2
 80008f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008fa:	e03a      	b.n	8000972 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	691b      	ldr	r3, [r3, #16]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d020      	beq.n	8000946 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000904:	4b36      	ldr	r3, [pc, #216]	; (80009e0 <HAL_RCC_OscConfig+0x270>)
 8000906:	2201      	movs	r2, #1
 8000908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800090a:	f7ff fe37 	bl	800057c <HAL_GetTick>
 800090e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000910:	e008      	b.n	8000924 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000912:	f7ff fe33 	bl	800057c <HAL_GetTick>
 8000916:	4602      	mov	r2, r0
 8000918:	693b      	ldr	r3, [r7, #16]
 800091a:	1ad3      	subs	r3, r2, r3
 800091c:	2b02      	cmp	r3, #2
 800091e:	d901      	bls.n	8000924 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000920:	2303      	movs	r3, #3
 8000922:	e1a1      	b.n	8000c68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000924:	4b2d      	ldr	r3, [pc, #180]	; (80009dc <HAL_RCC_OscConfig+0x26c>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f003 0302 	and.w	r3, r3, #2
 800092c:	2b00      	cmp	r3, #0
 800092e:	d0f0      	beq.n	8000912 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000930:	4b2a      	ldr	r3, [pc, #168]	; (80009dc <HAL_RCC_OscConfig+0x26c>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	695b      	ldr	r3, [r3, #20]
 800093c:	00db      	lsls	r3, r3, #3
 800093e:	4927      	ldr	r1, [pc, #156]	; (80009dc <HAL_RCC_OscConfig+0x26c>)
 8000940:	4313      	orrs	r3, r2
 8000942:	600b      	str	r3, [r1, #0]
 8000944:	e015      	b.n	8000972 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000946:	4b26      	ldr	r3, [pc, #152]	; (80009e0 <HAL_RCC_OscConfig+0x270>)
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800094c:	f7ff fe16 	bl	800057c <HAL_GetTick>
 8000950:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000952:	e008      	b.n	8000966 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000954:	f7ff fe12 	bl	800057c <HAL_GetTick>
 8000958:	4602      	mov	r2, r0
 800095a:	693b      	ldr	r3, [r7, #16]
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	2b02      	cmp	r3, #2
 8000960:	d901      	bls.n	8000966 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000962:	2303      	movs	r3, #3
 8000964:	e180      	b.n	8000c68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000966:	4b1d      	ldr	r3, [pc, #116]	; (80009dc <HAL_RCC_OscConfig+0x26c>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f003 0302 	and.w	r3, r3, #2
 800096e:	2b00      	cmp	r3, #0
 8000970:	d1f0      	bne.n	8000954 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f003 0308 	and.w	r3, r3, #8
 800097a:	2b00      	cmp	r3, #0
 800097c:	d03a      	beq.n	80009f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	699b      	ldr	r3, [r3, #24]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d019      	beq.n	80009ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000986:	4b17      	ldr	r3, [pc, #92]	; (80009e4 <HAL_RCC_OscConfig+0x274>)
 8000988:	2201      	movs	r2, #1
 800098a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800098c:	f7ff fdf6 	bl	800057c <HAL_GetTick>
 8000990:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000992:	e008      	b.n	80009a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000994:	f7ff fdf2 	bl	800057c <HAL_GetTick>
 8000998:	4602      	mov	r2, r0
 800099a:	693b      	ldr	r3, [r7, #16]
 800099c:	1ad3      	subs	r3, r2, r3
 800099e:	2b02      	cmp	r3, #2
 80009a0:	d901      	bls.n	80009a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80009a2:	2303      	movs	r3, #3
 80009a4:	e160      	b.n	8000c68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009a6:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <HAL_RCC_OscConfig+0x26c>)
 80009a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009aa:	f003 0302 	and.w	r3, r3, #2
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d0f0      	beq.n	8000994 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80009b2:	2001      	movs	r0, #1
 80009b4:	f000 fac4 	bl	8000f40 <RCC_Delay>
 80009b8:	e01c      	b.n	80009f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80009ba:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <HAL_RCC_OscConfig+0x274>)
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009c0:	f7ff fddc 	bl	800057c <HAL_GetTick>
 80009c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009c6:	e00f      	b.n	80009e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80009c8:	f7ff fdd8 	bl	800057c <HAL_GetTick>
 80009cc:	4602      	mov	r2, r0
 80009ce:	693b      	ldr	r3, [r7, #16]
 80009d0:	1ad3      	subs	r3, r2, r3
 80009d2:	2b02      	cmp	r3, #2
 80009d4:	d908      	bls.n	80009e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80009d6:	2303      	movs	r3, #3
 80009d8:	e146      	b.n	8000c68 <HAL_RCC_OscConfig+0x4f8>
 80009da:	bf00      	nop
 80009dc:	40021000 	.word	0x40021000
 80009e0:	42420000 	.word	0x42420000
 80009e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009e8:	4b92      	ldr	r3, [pc, #584]	; (8000c34 <HAL_RCC_OscConfig+0x4c4>)
 80009ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ec:	f003 0302 	and.w	r3, r3, #2
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d1e9      	bne.n	80009c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f003 0304 	and.w	r3, r3, #4
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	f000 80a6 	beq.w	8000b4e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000a02:	2300      	movs	r3, #0
 8000a04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a06:	4b8b      	ldr	r3, [pc, #556]	; (8000c34 <HAL_RCC_OscConfig+0x4c4>)
 8000a08:	69db      	ldr	r3, [r3, #28]
 8000a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d10d      	bne.n	8000a2e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a12:	4b88      	ldr	r3, [pc, #544]	; (8000c34 <HAL_RCC_OscConfig+0x4c4>)
 8000a14:	69db      	ldr	r3, [r3, #28]
 8000a16:	4a87      	ldr	r2, [pc, #540]	; (8000c34 <HAL_RCC_OscConfig+0x4c4>)
 8000a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a1c:	61d3      	str	r3, [r2, #28]
 8000a1e:	4b85      	ldr	r3, [pc, #532]	; (8000c34 <HAL_RCC_OscConfig+0x4c4>)
 8000a20:	69db      	ldr	r3, [r3, #28]
 8000a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a2e:	4b82      	ldr	r3, [pc, #520]	; (8000c38 <HAL_RCC_OscConfig+0x4c8>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d118      	bne.n	8000a6c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a3a:	4b7f      	ldr	r3, [pc, #508]	; (8000c38 <HAL_RCC_OscConfig+0x4c8>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a7e      	ldr	r2, [pc, #504]	; (8000c38 <HAL_RCC_OscConfig+0x4c8>)
 8000a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000a46:	f7ff fd99 	bl	800057c <HAL_GetTick>
 8000a4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a4c:	e008      	b.n	8000a60 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a4e:	f7ff fd95 	bl	800057c <HAL_GetTick>
 8000a52:	4602      	mov	r2, r0
 8000a54:	693b      	ldr	r3, [r7, #16]
 8000a56:	1ad3      	subs	r3, r2, r3
 8000a58:	2b64      	cmp	r3, #100	; 0x64
 8000a5a:	d901      	bls.n	8000a60 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	e103      	b.n	8000c68 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a60:	4b75      	ldr	r3, [pc, #468]	; (8000c38 <HAL_RCC_OscConfig+0x4c8>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d0f0      	beq.n	8000a4e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d106      	bne.n	8000a82 <HAL_RCC_OscConfig+0x312>
 8000a74:	4b6f      	ldr	r3, [pc, #444]	; (8000c34 <HAL_RCC_OscConfig+0x4c4>)
 8000a76:	6a1b      	ldr	r3, [r3, #32]
 8000a78:	4a6e      	ldr	r2, [pc, #440]	; (8000c34 <HAL_RCC_OscConfig+0x4c4>)
 8000a7a:	f043 0301 	orr.w	r3, r3, #1
 8000a7e:	6213      	str	r3, [r2, #32]
 8000a80:	e02d      	b.n	8000ade <HAL_RCC_OscConfig+0x36e>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	68db      	ldr	r3, [r3, #12]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d10c      	bne.n	8000aa4 <HAL_RCC_OscConfig+0x334>
 8000a8a:	4b6a      	ldr	r3, [pc, #424]	; (8000c34 <HAL_RCC_OscConfig+0x4c4>)
 8000a8c:	6a1b      	ldr	r3, [r3, #32]
 8000a8e:	4a69      	ldr	r2, [pc, #420]	; (8000c34 <HAL_RCC_OscConfig+0x4c4>)
 8000a90:	f023 0301 	bic.w	r3, r3, #1
 8000a94:	6213      	str	r3, [r2, #32]
 8000a96:	4b67      	ldr	r3, [pc, #412]	; (8000c34 <HAL_RCC_OscConfig+0x4c4>)
 8000a98:	6a1b      	ldr	r3, [r3, #32]
 8000a9a:	4a66      	ldr	r2, [pc, #408]	; (8000c34 <HAL_RCC_OscConfig+0x4c4>)
 8000a9c:	f023 0304 	bic.w	r3, r3, #4
 8000aa0:	6213      	str	r3, [r2, #32]
 8000aa2:	e01c      	b.n	8000ade <HAL_RCC_OscConfig+0x36e>
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	2b05      	cmp	r3, #5
 8000aaa:	d10c      	bne.n	8000ac6 <HAL_RCC_OscConfig+0x356>
 8000aac:	4b61      	ldr	r3, [pc, #388]	; (8000c34 <HAL_RCC_OscConfig+0x4c4>)
 8000aae:	6a1b      	ldr	r3, [r3, #32]
 8000ab0:	4a60      	ldr	r2, [pc, #384]	; (8000c34 <HAL_RCC_OscConfig+0x4c4>)
 8000ab2:	f043 0304 	orr.w	r3, r3, #4
 8000ab6:	6213      	str	r3, [r2, #32]
 8000ab8:	4b5e      	ldr	r3, [pc, #376]	; (8000c34 <HAL_RCC_OscConfig+0x4c4>)
 8000aba:	6a1b      	ldr	r3, [r3, #32]
 8000abc:	4a5d      	ldr	r2, [pc, #372]	; (8000c34 <HAL_RCC_OscConfig+0x4c4>)
 8000abe:	f043 0301 	orr.w	r3, r3, #1
 8000ac2:	6213      	str	r3, [r2, #32]
 8000ac4:	e00b      	b.n	8000ade <HAL_RCC_OscConfig+0x36e>
 8000ac6:	4b5b      	ldr	r3, [pc, #364]	; (8000c34 <HAL_RCC_OscConfig+0x4c4>)
 8000ac8:	6a1b      	ldr	r3, [r3, #32]
 8000aca:	4a5a      	ldr	r2, [pc, #360]	; (8000c34 <HAL_RCC_OscConfig+0x4c4>)
 8000acc:	f023 0301 	bic.w	r3, r3, #1
 8000ad0:	6213      	str	r3, [r2, #32]
 8000ad2:	4b58      	ldr	r3, [pc, #352]	; (8000c34 <HAL_RCC_OscConfig+0x4c4>)
 8000ad4:	6a1b      	ldr	r3, [r3, #32]
 8000ad6:	4a57      	ldr	r2, [pc, #348]	; (8000c34 <HAL_RCC_OscConfig+0x4c4>)
 8000ad8:	f023 0304 	bic.w	r3, r3, #4
 8000adc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	68db      	ldr	r3, [r3, #12]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d015      	beq.n	8000b12 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ae6:	f7ff fd49 	bl	800057c <HAL_GetTick>
 8000aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000aec:	e00a      	b.n	8000b04 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000aee:	f7ff fd45 	bl	800057c <HAL_GetTick>
 8000af2:	4602      	mov	r2, r0
 8000af4:	693b      	ldr	r3, [r7, #16]
 8000af6:	1ad3      	subs	r3, r2, r3
 8000af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d901      	bls.n	8000b04 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000b00:	2303      	movs	r3, #3
 8000b02:	e0b1      	b.n	8000c68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b04:	4b4b      	ldr	r3, [pc, #300]	; (8000c34 <HAL_RCC_OscConfig+0x4c4>)
 8000b06:	6a1b      	ldr	r3, [r3, #32]
 8000b08:	f003 0302 	and.w	r3, r3, #2
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d0ee      	beq.n	8000aee <HAL_RCC_OscConfig+0x37e>
 8000b10:	e014      	b.n	8000b3c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b12:	f7ff fd33 	bl	800057c <HAL_GetTick>
 8000b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b18:	e00a      	b.n	8000b30 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b1a:	f7ff fd2f 	bl	800057c <HAL_GetTick>
 8000b1e:	4602      	mov	r2, r0
 8000b20:	693b      	ldr	r3, [r7, #16]
 8000b22:	1ad3      	subs	r3, r2, r3
 8000b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d901      	bls.n	8000b30 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	e09b      	b.n	8000c68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b30:	4b40      	ldr	r3, [pc, #256]	; (8000c34 <HAL_RCC_OscConfig+0x4c4>)
 8000b32:	6a1b      	ldr	r3, [r3, #32]
 8000b34:	f003 0302 	and.w	r3, r3, #2
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d1ee      	bne.n	8000b1a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000b3c:	7dfb      	ldrb	r3, [r7, #23]
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d105      	bne.n	8000b4e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b42:	4b3c      	ldr	r3, [pc, #240]	; (8000c34 <HAL_RCC_OscConfig+0x4c4>)
 8000b44:	69db      	ldr	r3, [r3, #28]
 8000b46:	4a3b      	ldr	r2, [pc, #236]	; (8000c34 <HAL_RCC_OscConfig+0x4c4>)
 8000b48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b4c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	69db      	ldr	r3, [r3, #28]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	f000 8087 	beq.w	8000c66 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b58:	4b36      	ldr	r3, [pc, #216]	; (8000c34 <HAL_RCC_OscConfig+0x4c4>)
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	f003 030c 	and.w	r3, r3, #12
 8000b60:	2b08      	cmp	r3, #8
 8000b62:	d061      	beq.n	8000c28 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	69db      	ldr	r3, [r3, #28]
 8000b68:	2b02      	cmp	r3, #2
 8000b6a:	d146      	bne.n	8000bfa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b6c:	4b33      	ldr	r3, [pc, #204]	; (8000c3c <HAL_RCC_OscConfig+0x4cc>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b72:	f7ff fd03 	bl	800057c <HAL_GetTick>
 8000b76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b78:	e008      	b.n	8000b8c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b7a:	f7ff fcff 	bl	800057c <HAL_GetTick>
 8000b7e:	4602      	mov	r2, r0
 8000b80:	693b      	ldr	r3, [r7, #16]
 8000b82:	1ad3      	subs	r3, r2, r3
 8000b84:	2b02      	cmp	r3, #2
 8000b86:	d901      	bls.n	8000b8c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	e06d      	b.n	8000c68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b8c:	4b29      	ldr	r3, [pc, #164]	; (8000c34 <HAL_RCC_OscConfig+0x4c4>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d1f0      	bne.n	8000b7a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6a1b      	ldr	r3, [r3, #32]
 8000b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ba0:	d108      	bne.n	8000bb4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ba2:	4b24      	ldr	r3, [pc, #144]	; (8000c34 <HAL_RCC_OscConfig+0x4c4>)
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	689b      	ldr	r3, [r3, #8]
 8000bae:	4921      	ldr	r1, [pc, #132]	; (8000c34 <HAL_RCC_OscConfig+0x4c4>)
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000bb4:	4b1f      	ldr	r3, [pc, #124]	; (8000c34 <HAL_RCC_OscConfig+0x4c4>)
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6a19      	ldr	r1, [r3, #32]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bc4:	430b      	orrs	r3, r1
 8000bc6:	491b      	ldr	r1, [pc, #108]	; (8000c34 <HAL_RCC_OscConfig+0x4c4>)
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000bcc:	4b1b      	ldr	r3, [pc, #108]	; (8000c3c <HAL_RCC_OscConfig+0x4cc>)
 8000bce:	2201      	movs	r2, #1
 8000bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bd2:	f7ff fcd3 	bl	800057c <HAL_GetTick>
 8000bd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000bd8:	e008      	b.n	8000bec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000bda:	f7ff fccf 	bl	800057c <HAL_GetTick>
 8000bde:	4602      	mov	r2, r0
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	1ad3      	subs	r3, r2, r3
 8000be4:	2b02      	cmp	r3, #2
 8000be6:	d901      	bls.n	8000bec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000be8:	2303      	movs	r3, #3
 8000bea:	e03d      	b.n	8000c68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000bec:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <HAL_RCC_OscConfig+0x4c4>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d0f0      	beq.n	8000bda <HAL_RCC_OscConfig+0x46a>
 8000bf8:	e035      	b.n	8000c66 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000bfa:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <HAL_RCC_OscConfig+0x4cc>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c00:	f7ff fcbc 	bl	800057c <HAL_GetTick>
 8000c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c06:	e008      	b.n	8000c1a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c08:	f7ff fcb8 	bl	800057c <HAL_GetTick>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	2b02      	cmp	r3, #2
 8000c14:	d901      	bls.n	8000c1a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000c16:	2303      	movs	r3, #3
 8000c18:	e026      	b.n	8000c68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <HAL_RCC_OscConfig+0x4c4>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d1f0      	bne.n	8000c08 <HAL_RCC_OscConfig+0x498>
 8000c26:	e01e      	b.n	8000c66 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	69db      	ldr	r3, [r3, #28]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d107      	bne.n	8000c40 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000c30:	2301      	movs	r3, #1
 8000c32:	e019      	b.n	8000c68 <HAL_RCC_OscConfig+0x4f8>
 8000c34:	40021000 	.word	0x40021000
 8000c38:	40007000 	.word	0x40007000
 8000c3c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000c40:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <HAL_RCC_OscConfig+0x500>)
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6a1b      	ldr	r3, [r3, #32]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d106      	bne.n	8000c62 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	d001      	beq.n	8000c66 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e000      	b.n	8000c68 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000c66:	2300      	movs	r3, #0
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3718      	adds	r7, #24
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40021000 	.word	0x40021000

08000c74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d101      	bne.n	8000c88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000c84:	2301      	movs	r3, #1
 8000c86:	e0d0      	b.n	8000e2a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000c88:	4b6a      	ldr	r3, [pc, #424]	; (8000e34 <HAL_RCC_ClockConfig+0x1c0>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f003 0307 	and.w	r3, r3, #7
 8000c90:	683a      	ldr	r2, [r7, #0]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d910      	bls.n	8000cb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c96:	4b67      	ldr	r3, [pc, #412]	; (8000e34 <HAL_RCC_ClockConfig+0x1c0>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f023 0207 	bic.w	r2, r3, #7
 8000c9e:	4965      	ldr	r1, [pc, #404]	; (8000e34 <HAL_RCC_ClockConfig+0x1c0>)
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ca6:	4b63      	ldr	r3, [pc, #396]	; (8000e34 <HAL_RCC_ClockConfig+0x1c0>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f003 0307 	and.w	r3, r3, #7
 8000cae:	683a      	ldr	r2, [r7, #0]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d001      	beq.n	8000cb8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	e0b8      	b.n	8000e2a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f003 0302 	and.w	r3, r3, #2
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d020      	beq.n	8000d06 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f003 0304 	and.w	r3, r3, #4
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d005      	beq.n	8000cdc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000cd0:	4b59      	ldr	r3, [pc, #356]	; (8000e38 <HAL_RCC_ClockConfig+0x1c4>)
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	4a58      	ldr	r2, [pc, #352]	; (8000e38 <HAL_RCC_ClockConfig+0x1c4>)
 8000cd6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000cda:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f003 0308 	and.w	r3, r3, #8
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d005      	beq.n	8000cf4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000ce8:	4b53      	ldr	r3, [pc, #332]	; (8000e38 <HAL_RCC_ClockConfig+0x1c4>)
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	4a52      	ldr	r2, [pc, #328]	; (8000e38 <HAL_RCC_ClockConfig+0x1c4>)
 8000cee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000cf2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cf4:	4b50      	ldr	r3, [pc, #320]	; (8000e38 <HAL_RCC_ClockConfig+0x1c4>)
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	494d      	ldr	r1, [pc, #308]	; (8000e38 <HAL_RCC_ClockConfig+0x1c4>)
 8000d02:	4313      	orrs	r3, r2
 8000d04:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d040      	beq.n	8000d94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d107      	bne.n	8000d2a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d1a:	4b47      	ldr	r3, [pc, #284]	; (8000e38 <HAL_RCC_ClockConfig+0x1c4>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d115      	bne.n	8000d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	e07f      	b.n	8000e2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d107      	bne.n	8000d42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d32:	4b41      	ldr	r3, [pc, #260]	; (8000e38 <HAL_RCC_ClockConfig+0x1c4>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d109      	bne.n	8000d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e073      	b.n	8000e2a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d42:	4b3d      	ldr	r3, [pc, #244]	; (8000e38 <HAL_RCC_ClockConfig+0x1c4>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d101      	bne.n	8000d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e06b      	b.n	8000e2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d52:	4b39      	ldr	r3, [pc, #228]	; (8000e38 <HAL_RCC_ClockConfig+0x1c4>)
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f023 0203 	bic.w	r2, r3, #3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	4936      	ldr	r1, [pc, #216]	; (8000e38 <HAL_RCC_ClockConfig+0x1c4>)
 8000d60:	4313      	orrs	r3, r2
 8000d62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000d64:	f7ff fc0a 	bl	800057c <HAL_GetTick>
 8000d68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d6a:	e00a      	b.n	8000d82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d6c:	f7ff fc06 	bl	800057c <HAL_GetTick>
 8000d70:	4602      	mov	r2, r0
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d901      	bls.n	8000d82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	e053      	b.n	8000e2a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d82:	4b2d      	ldr	r3, [pc, #180]	; (8000e38 <HAL_RCC_ClockConfig+0x1c4>)
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f003 020c 	and.w	r2, r3, #12
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d1eb      	bne.n	8000d6c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000d94:	4b27      	ldr	r3, [pc, #156]	; (8000e34 <HAL_RCC_ClockConfig+0x1c0>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f003 0307 	and.w	r3, r3, #7
 8000d9c:	683a      	ldr	r2, [r7, #0]
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d210      	bcs.n	8000dc4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000da2:	4b24      	ldr	r3, [pc, #144]	; (8000e34 <HAL_RCC_ClockConfig+0x1c0>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f023 0207 	bic.w	r2, r3, #7
 8000daa:	4922      	ldr	r1, [pc, #136]	; (8000e34 <HAL_RCC_ClockConfig+0x1c0>)
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000db2:	4b20      	ldr	r3, [pc, #128]	; (8000e34 <HAL_RCC_ClockConfig+0x1c0>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	683a      	ldr	r2, [r7, #0]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d001      	beq.n	8000dc4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	e032      	b.n	8000e2a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f003 0304 	and.w	r3, r3, #4
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d008      	beq.n	8000de2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000dd0:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <HAL_RCC_ClockConfig+0x1c4>)
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	4916      	ldr	r1, [pc, #88]	; (8000e38 <HAL_RCC_ClockConfig+0x1c4>)
 8000dde:	4313      	orrs	r3, r2
 8000de0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f003 0308 	and.w	r3, r3, #8
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d009      	beq.n	8000e02 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000dee:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <HAL_RCC_ClockConfig+0x1c4>)
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	691b      	ldr	r3, [r3, #16]
 8000dfa:	00db      	lsls	r3, r3, #3
 8000dfc:	490e      	ldr	r1, [pc, #56]	; (8000e38 <HAL_RCC_ClockConfig+0x1c4>)
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000e02:	f000 f821 	bl	8000e48 <HAL_RCC_GetSysClockFreq>
 8000e06:	4602      	mov	r2, r0
 8000e08:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <HAL_RCC_ClockConfig+0x1c4>)
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	091b      	lsrs	r3, r3, #4
 8000e0e:	f003 030f 	and.w	r3, r3, #15
 8000e12:	490a      	ldr	r1, [pc, #40]	; (8000e3c <HAL_RCC_ClockConfig+0x1c8>)
 8000e14:	5ccb      	ldrb	r3, [r1, r3]
 8000e16:	fa22 f303 	lsr.w	r3, r2, r3
 8000e1a:	4a09      	ldr	r2, [pc, #36]	; (8000e40 <HAL_RCC_ClockConfig+0x1cc>)
 8000e1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000e1e:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <HAL_RCC_ClockConfig+0x1d0>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff fb68 	bl	80004f8 <HAL_InitTick>

  return HAL_OK;
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40022000 	.word	0x40022000
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	08001ec8 	.word	0x08001ec8
 8000e40:	20000000 	.word	0x20000000
 8000e44:	20000004 	.word	0x20000004

08000e48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e48:	b490      	push	{r4, r7}
 8000e4a:	b08a      	sub	sp, #40	; 0x28
 8000e4c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000e4e:	4b29      	ldr	r3, [pc, #164]	; (8000ef4 <HAL_RCC_GetSysClockFreq+0xac>)
 8000e50:	1d3c      	adds	r4, r7, #4
 8000e52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000e58:	f240 2301 	movw	r3, #513	; 0x201
 8000e5c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]
 8000e62:	2300      	movs	r3, #0
 8000e64:	61bb      	str	r3, [r7, #24]
 8000e66:	2300      	movs	r3, #0
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000e72:	4b21      	ldr	r3, [pc, #132]	; (8000ef8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	f003 030c 	and.w	r3, r3, #12
 8000e7e:	2b04      	cmp	r3, #4
 8000e80:	d002      	beq.n	8000e88 <HAL_RCC_GetSysClockFreq+0x40>
 8000e82:	2b08      	cmp	r3, #8
 8000e84:	d003      	beq.n	8000e8e <HAL_RCC_GetSysClockFreq+0x46>
 8000e86:	e02b      	b.n	8000ee0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000e88:	4b1c      	ldr	r3, [pc, #112]	; (8000efc <HAL_RCC_GetSysClockFreq+0xb4>)
 8000e8a:	623b      	str	r3, [r7, #32]
      break;
 8000e8c:	e02b      	b.n	8000ee6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	0c9b      	lsrs	r3, r3, #18
 8000e92:	f003 030f 	and.w	r3, r3, #15
 8000e96:	3328      	adds	r3, #40	; 0x28
 8000e98:	443b      	add	r3, r7
 8000e9a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000e9e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d012      	beq.n	8000ed0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000eaa:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	0c5b      	lsrs	r3, r3, #17
 8000eb0:	f003 0301 	and.w	r3, r3, #1
 8000eb4:	3328      	adds	r3, #40	; 0x28
 8000eb6:	443b      	add	r3, r7
 8000eb8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000ebc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	4a0e      	ldr	r2, [pc, #56]	; (8000efc <HAL_RCC_GetSysClockFreq+0xb4>)
 8000ec2:	fb03 f202 	mul.w	r2, r3, r2
 8000ec6:	69bb      	ldr	r3, [r7, #24]
 8000ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8000ece:	e004      	b.n	8000eda <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	4a0b      	ldr	r2, [pc, #44]	; (8000f00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000ed4:	fb02 f303 	mul.w	r3, r2, r3
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000edc:	623b      	str	r3, [r7, #32]
      break;
 8000ede:	e002      	b.n	8000ee6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_RCC_GetSysClockFreq+0xb4>)
 8000ee2:	623b      	str	r3, [r7, #32]
      break;
 8000ee4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000ee6:	6a3b      	ldr	r3, [r7, #32]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3728      	adds	r7, #40	; 0x28
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bc90      	pop	{r4, r7}
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	08001ea8 	.word	0x08001ea8
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	007a1200 	.word	0x007a1200
 8000f00:	003d0900 	.word	0x003d0900

08000f04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000f08:	4b02      	ldr	r3, [pc, #8]	; (8000f14 <HAL_RCC_GetHCLKFreq+0x10>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr
 8000f14:	20000000 	.word	0x20000000

08000f18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000f1c:	f7ff fff2 	bl	8000f04 <HAL_RCC_GetHCLKFreq>
 8000f20:	4602      	mov	r2, r0
 8000f22:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	0adb      	lsrs	r3, r3, #11
 8000f28:	f003 0307 	and.w	r3, r3, #7
 8000f2c:	4903      	ldr	r1, [pc, #12]	; (8000f3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8000f2e:	5ccb      	ldrb	r3, [r1, r3]
 8000f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	08001ed8 	.word	0x08001ed8

08000f40 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000f48:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <RCC_Delay+0x34>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <RCC_Delay+0x38>)
 8000f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f52:	0a5b      	lsrs	r3, r3, #9
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	fb02 f303 	mul.w	r3, r2, r3
 8000f5a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8000f5c:	bf00      	nop
  }
  while (Delay --);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	1e5a      	subs	r2, r3, #1
 8000f62:	60fa      	str	r2, [r7, #12]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d1f9      	bne.n	8000f5c <RCC_Delay+0x1c>
}
 8000f68:	bf00      	nop
 8000f6a:	bf00      	nop
 8000f6c:	3714      	adds	r7, #20
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr
 8000f74:	20000000 	.word	0x20000000
 8000f78:	10624dd3 	.word	0x10624dd3

08000f7c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8000f84:	2300      	movs	r3, #0
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f003 0301 	and.w	r3, r3, #1
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d07d      	beq.n	8001094 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f9c:	4b4f      	ldr	r3, [pc, #316]	; (80010dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8000f9e:	69db      	ldr	r3, [r3, #28]
 8000fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d10d      	bne.n	8000fc4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fa8:	4b4c      	ldr	r3, [pc, #304]	; (80010dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8000faa:	69db      	ldr	r3, [r3, #28]
 8000fac:	4a4b      	ldr	r2, [pc, #300]	; (80010dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8000fae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb2:	61d3      	str	r3, [r2, #28]
 8000fb4:	4b49      	ldr	r3, [pc, #292]	; (80010dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8000fb6:	69db      	ldr	r3, [r3, #28]
 8000fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fc4:	4b46      	ldr	r3, [pc, #280]	; (80010e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d118      	bne.n	8001002 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fd0:	4b43      	ldr	r3, [pc, #268]	; (80010e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a42      	ldr	r2, [pc, #264]	; (80010e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8000fd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fda:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fdc:	f7ff face 	bl	800057c <HAL_GetTick>
 8000fe0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fe2:	e008      	b.n	8000ff6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fe4:	f7ff faca 	bl	800057c <HAL_GetTick>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	2b64      	cmp	r3, #100	; 0x64
 8000ff0:	d901      	bls.n	8000ff6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	e06d      	b.n	80010d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ff6:	4b3a      	ldr	r3, [pc, #232]	; (80010e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d0f0      	beq.n	8000fe4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001002:	4b36      	ldr	r3, [pc, #216]	; (80010dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001004:	6a1b      	ldr	r3, [r3, #32]
 8001006:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800100a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d02e      	beq.n	8001070 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800101a:	68fa      	ldr	r2, [r7, #12]
 800101c:	429a      	cmp	r2, r3
 800101e:	d027      	beq.n	8001070 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001020:	4b2e      	ldr	r3, [pc, #184]	; (80010dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001022:	6a1b      	ldr	r3, [r3, #32]
 8001024:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001028:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800102a:	4b2e      	ldr	r3, [pc, #184]	; (80010e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800102c:	2201      	movs	r2, #1
 800102e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001030:	4b2c      	ldr	r3, [pc, #176]	; (80010e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001036:	4a29      	ldr	r2, [pc, #164]	; (80010dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	2b00      	cmp	r3, #0
 8001044:	d014      	beq.n	8001070 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001046:	f7ff fa99 	bl	800057c <HAL_GetTick>
 800104a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800104c:	e00a      	b.n	8001064 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800104e:	f7ff fa95 	bl	800057c <HAL_GetTick>
 8001052:	4602      	mov	r2, r0
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	f241 3288 	movw	r2, #5000	; 0x1388
 800105c:	4293      	cmp	r3, r2
 800105e:	d901      	bls.n	8001064 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001060:	2303      	movs	r3, #3
 8001062:	e036      	b.n	80010d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001064:	4b1d      	ldr	r3, [pc, #116]	; (80010dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001066:	6a1b      	ldr	r3, [r3, #32]
 8001068:	f003 0302 	and.w	r3, r3, #2
 800106c:	2b00      	cmp	r3, #0
 800106e:	d0ee      	beq.n	800104e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001070:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001072:	6a1b      	ldr	r3, [r3, #32]
 8001074:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	4917      	ldr	r1, [pc, #92]	; (80010dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800107e:	4313      	orrs	r3, r2
 8001080:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001082:	7dfb      	ldrb	r3, [r7, #23]
 8001084:	2b01      	cmp	r3, #1
 8001086:	d105      	bne.n	8001094 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001088:	4b14      	ldr	r3, [pc, #80]	; (80010dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800108a:	69db      	ldr	r3, [r3, #28]
 800108c:	4a13      	ldr	r2, [pc, #76]	; (80010dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800108e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001092:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 0302 	and.w	r3, r3, #2
 800109c:	2b00      	cmp	r3, #0
 800109e:	d008      	beq.n	80010b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80010a0:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	490b      	ldr	r1, [pc, #44]	; (80010dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80010ae:	4313      	orrs	r3, r2
 80010b0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0310 	and.w	r3, r3, #16
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d008      	beq.n	80010d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80010be:	4b07      	ldr	r3, [pc, #28]	; (80010dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	4904      	ldr	r1, [pc, #16]	; (80010dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80010cc:	4313      	orrs	r3, r2
 80010ce:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3718      	adds	r7, #24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40021000 	.word	0x40021000
 80010e0:	40007000 	.word	0x40007000
 80010e4:	42420440 	.word	0x42420440

080010e8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80010e8:	b590      	push	{r4, r7, lr}
 80010ea:	b08d      	sub	sp, #52	; 0x34
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80010f0:	4b58      	ldr	r3, [pc, #352]	; (8001254 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80010f2:	f107 040c 	add.w	r4, r7, #12
 80010f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80010fc:	f240 2301 	movw	r3, #513	; 0x201
 8001100:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001102:	2300      	movs	r3, #0
 8001104:	627b      	str	r3, [r7, #36]	; 0x24
 8001106:	2300      	movs	r3, #0
 8001108:	62fb      	str	r3, [r7, #44]	; 0x2c
 800110a:	2300      	movs	r3, #0
 800110c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
 8001112:	2300      	movs	r3, #0
 8001114:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2b10      	cmp	r3, #16
 800111a:	d00a      	beq.n	8001132 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b10      	cmp	r3, #16
 8001120:	f200 808e 	bhi.w	8001240 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d049      	beq.n	80011be <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b02      	cmp	r3, #2
 800112e:	d079      	beq.n	8001224 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001130:	e086      	b.n	8001240 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8001132:	4b49      	ldr	r3, [pc, #292]	; (8001258 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001138:	4b47      	ldr	r3, [pc, #284]	; (8001258 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d07f      	beq.n	8001244 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	0c9b      	lsrs	r3, r3, #18
 8001148:	f003 030f 	and.w	r3, r3, #15
 800114c:	3330      	adds	r3, #48	; 0x30
 800114e:	443b      	add	r3, r7
 8001150:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001154:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d017      	beq.n	8001190 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001160:	4b3d      	ldr	r3, [pc, #244]	; (8001258 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	0c5b      	lsrs	r3, r3, #17
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	3330      	adds	r3, #48	; 0x30
 800116c:	443b      	add	r3, r7
 800116e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d00d      	beq.n	800119a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800117e:	4a37      	ldr	r2, [pc, #220]	; (800125c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001182:	fbb2 f2f3 	udiv	r2, r2, r3
 8001186:	6a3b      	ldr	r3, [r7, #32]
 8001188:	fb02 f303 	mul.w	r3, r2, r3
 800118c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800118e:	e004      	b.n	800119a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001190:	6a3b      	ldr	r3, [r7, #32]
 8001192:	4a33      	ldr	r2, [pc, #204]	; (8001260 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001194:	fb02 f303 	mul.w	r3, r2, r3
 8001198:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800119a:	4b2f      	ldr	r3, [pc, #188]	; (8001258 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011a6:	d102      	bne.n	80011ae <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 80011a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011aa:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80011ac:	e04a      	b.n	8001244 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 80011ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	4a2c      	ldr	r2, [pc, #176]	; (8001264 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80011b4:	fba2 2303 	umull	r2, r3, r2, r3
 80011b8:	085b      	lsrs	r3, r3, #1
 80011ba:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80011bc:	e042      	b.n	8001244 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 80011be:	4b26      	ldr	r3, [pc, #152]	; (8001258 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80011c0:	6a1b      	ldr	r3, [r3, #32]
 80011c2:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80011ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011ce:	d108      	bne.n	80011e2 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 80011da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011de:	62bb      	str	r3, [r7, #40]	; 0x28
 80011e0:	e01f      	b.n	8001222 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80011e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011ec:	d109      	bne.n	8001202 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 80011ee:	4b1a      	ldr	r3, [pc, #104]	; (8001258 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80011f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 80011fa:	f649 4340 	movw	r3, #40000	; 0x9c40
 80011fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8001200:	e00f      	b.n	8001222 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001208:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800120c:	d11c      	bne.n	8001248 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800120e:	4b12      	ldr	r3, [pc, #72]	; (8001258 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d016      	beq.n	8001248 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 800121a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800121e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001220:	e012      	b.n	8001248 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8001222:	e011      	b.n	8001248 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001224:	f7ff fe78 	bl	8000f18 <HAL_RCC_GetPCLK2Freq>
 8001228:	4602      	mov	r2, r0
 800122a:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	0b9b      	lsrs	r3, r3, #14
 8001230:	f003 0303 	and.w	r3, r3, #3
 8001234:	3301      	adds	r3, #1
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	fbb2 f3f3 	udiv	r3, r2, r3
 800123c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800123e:	e004      	b.n	800124a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8001240:	bf00      	nop
 8001242:	e002      	b.n	800124a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8001244:	bf00      	nop
 8001246:	e000      	b.n	800124a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8001248:	bf00      	nop
    }
  }
  return (frequency);
 800124a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800124c:	4618      	mov	r0, r3
 800124e:	3734      	adds	r7, #52	; 0x34
 8001250:	46bd      	mov	sp, r7
 8001252:	bd90      	pop	{r4, r7, pc}
 8001254:	08001eb8 	.word	0x08001eb8
 8001258:	40021000 	.word	0x40021000
 800125c:	007a1200 	.word	0x007a1200
 8001260:	003d0900 	.word	0x003d0900
 8001264:	aaaaaaab 	.word	0xaaaaaaab

08001268 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8001270:	2300      	movs	r3, #0
 8001272:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d101      	bne.n	800127e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e084      	b.n	8001388 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	7c5b      	ldrb	r3, [r3, #17]
 8001282:	b2db      	uxtb	r3, r3
 8001284:	2b00      	cmp	r3, #0
 8001286:	d105      	bne.n	8001294 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff f8a4 	bl	80003dc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2202      	movs	r2, #2
 8001298:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f000 faf4 	bl	8001888 <HAL_RTC_WaitForSynchro>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d004      	beq.n	80012b0 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2204      	movs	r2, #4
 80012aa:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e06b      	b.n	8001388 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f000 fbad 	bl	8001a10 <RTC_EnterInitMode>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d004      	beq.n	80012c6 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2204      	movs	r2, #4
 80012c0:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e060      	b.n	8001388 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	685a      	ldr	r2, [r3, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f022 0207 	bic.w	r2, r2, #7
 80012d4:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d005      	beq.n	80012ea <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80012de:	4b2c      	ldr	r3, [pc, #176]	; (8001390 <HAL_RTC_Init+0x128>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a2b      	ldr	r2, [pc, #172]	; (8001390 <HAL_RTC_Init+0x128>)
 80012e4:	f023 0301 	bic.w	r3, r3, #1
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80012ea:	4b29      	ldr	r3, [pc, #164]	; (8001390 <HAL_RTC_Init+0x128>)
 80012ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ee:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	4926      	ldr	r1, [pc, #152]	; (8001390 <HAL_RTC_Init+0x128>)
 80012f8:	4313      	orrs	r3, r2
 80012fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001304:	d003      	beq.n	800130e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	e00e      	b.n	800132c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800130e:	2001      	movs	r0, #1
 8001310:	f7ff feea 	bl	80010e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8001314:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d104      	bne.n	8001326 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2204      	movs	r2, #4
 8001320:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e030      	b.n	8001388 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	3b01      	subs	r3, #1
 800132a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f023 010f 	bic.w	r1, r3, #15
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	0c1a      	lsrs	r2, r3, #16
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	430a      	orrs	r2, r1
 8001340:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	0c1b      	lsrs	r3, r3, #16
 800134a:	041b      	lsls	r3, r3, #16
 800134c:	68fa      	ldr	r2, [r7, #12]
 800134e:	b291      	uxth	r1, r2
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	6812      	ldr	r2, [r2, #0]
 8001354:	430b      	orrs	r3, r1
 8001356:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f000 fb81 	bl	8001a60 <RTC_ExitInitMode>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d004      	beq.n	800136e <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2204      	movs	r2, #4
 8001368:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e00c      	b.n	8001388 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2201      	movs	r2, #1
 8001378:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2201      	movs	r2, #1
 800137e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2201      	movs	r2, #1
 8001384:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8001386:	2300      	movs	r3, #0
  }
}
 8001388:	4618      	mov	r0, r3
 800138a:	3710      	adds	r7, #16
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40006c00 	.word	0x40006c00

08001394 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001394:	b590      	push	{r4, r7, lr}
 8001396:	b087      	sub	sp, #28
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]
 80013a4:	2300      	movs	r3, #0
 80013a6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d002      	beq.n	80013b4 <HAL_RTC_SetTime+0x20>
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d101      	bne.n	80013b8 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e080      	b.n	80014ba <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	7c1b      	ldrb	r3, [r3, #16]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d101      	bne.n	80013c4 <HAL_RTC_SetTime+0x30>
 80013c0:	2302      	movs	r3, #2
 80013c2:	e07a      	b.n	80014ba <HAL_RTC_SetTime+0x126>
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2201      	movs	r2, #1
 80013c8:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2202      	movs	r2, #2
 80013ce:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d113      	bne.n	80013fe <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	461a      	mov	r2, r3
 80013dc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80013e0:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	785b      	ldrb	r3, [r3, #1]
 80013e8:	4619      	mov	r1, r3
 80013ea:	460b      	mov	r3, r1
 80013ec:	011b      	lsls	r3, r3, #4
 80013ee:	1a5b      	subs	r3, r3, r1
 80013f0:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80013f2:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80013f4:	68ba      	ldr	r2, [r7, #8]
 80013f6:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80013f8:	4413      	add	r3, r2
 80013fa:	617b      	str	r3, [r7, #20]
 80013fc:	e01e      	b.n	800143c <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f000 fb71 	bl	8001aea <RTC_Bcd2ToByte>
 8001408:	4603      	mov	r3, r0
 800140a:	461a      	mov	r2, r3
 800140c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001410:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	785b      	ldrb	r3, [r3, #1]
 8001418:	4618      	mov	r0, r3
 800141a:	f000 fb66 	bl	8001aea <RTC_Bcd2ToByte>
 800141e:	4603      	mov	r3, r0
 8001420:	461a      	mov	r2, r3
 8001422:	4613      	mov	r3, r2
 8001424:	011b      	lsls	r3, r3, #4
 8001426:	1a9b      	subs	r3, r3, r2
 8001428:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800142a:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	789b      	ldrb	r3, [r3, #2]
 8001430:	4618      	mov	r0, r3
 8001432:	f000 fb5a 	bl	8001aea <RTC_Bcd2ToByte>
 8001436:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001438:	4423      	add	r3, r4
 800143a:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800143c:	6979      	ldr	r1, [r7, #20]
 800143e:	68f8      	ldr	r0, [r7, #12]
 8001440:	f000 fa7f 	bl	8001942 <RTC_WriteTimeCounter>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d007      	beq.n	800145a <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	2204      	movs	r2, #4
 800144e:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2200      	movs	r2, #0
 8001454:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e02f      	b.n	80014ba <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	685a      	ldr	r2, [r3, #4]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f022 0205 	bic.w	r2, r2, #5
 8001468:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800146a:	68f8      	ldr	r0, [r7, #12]
 800146c:	f000 fa90 	bl	8001990 <RTC_ReadAlarmCounter>
 8001470:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001478:	d018      	beq.n	80014ac <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	429a      	cmp	r2, r3
 8001480:	d214      	bcs.n	80014ac <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001488:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800148c:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800148e:	6939      	ldr	r1, [r7, #16]
 8001490:	68f8      	ldr	r0, [r7, #12]
 8001492:	f000 fa96 	bl	80019c2 <RTC_WriteAlarmCounter>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d007      	beq.n	80014ac <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2204      	movs	r2, #4
 80014a0:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	2200      	movs	r2, #0
 80014a6:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e006      	b.n	80014ba <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	2201      	movs	r2, #1
 80014b0:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2200      	movs	r2, #0
 80014b6:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80014b8:	2300      	movs	r3, #0
  }
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	371c      	adds	r7, #28
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd90      	pop	{r4, r7, pc}
	...

080014c4 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b088      	sub	sp, #32
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61bb      	str	r3, [r7, #24]
 80014d4:	2300      	movs	r3, #0
 80014d6:	61fb      	str	r3, [r7, #28]
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]
 80014dc:	2300      	movs	r3, #0
 80014de:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d002      	beq.n	80014ec <HAL_RTC_GetTime+0x28>
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d101      	bne.n	80014f0 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e0b5      	b.n	800165c <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f003 0304 	and.w	r3, r3, #4
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e0ac      	b.n	800165c <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8001502:	68f8      	ldr	r0, [r7, #12]
 8001504:	f000 f9ed 	bl	80018e2 <RTC_ReadTimeCounter>
 8001508:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	4a55      	ldr	r2, [pc, #340]	; (8001664 <HAL_RTC_GetTime+0x1a0>)
 800150e:	fba2 2303 	umull	r2, r3, r2, r3
 8001512:	0adb      	lsrs	r3, r3, #11
 8001514:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4b52      	ldr	r3, [pc, #328]	; (8001664 <HAL_RTC_GetTime+0x1a0>)
 800151a:	fba3 1302 	umull	r1, r3, r3, r2
 800151e:	0adb      	lsrs	r3, r3, #11
 8001520:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8001524:	fb01 f303 	mul.w	r3, r1, r3
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	4a4f      	ldr	r2, [pc, #316]	; (8001668 <HAL_RTC_GetTime+0x1a4>)
 800152c:	fba2 2303 	umull	r2, r3, r2, r3
 8001530:	095b      	lsrs	r3, r3, #5
 8001532:	b2da      	uxtb	r2, r3
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	4a4a      	ldr	r2, [pc, #296]	; (8001664 <HAL_RTC_GetTime+0x1a0>)
 800153c:	fba2 1203 	umull	r1, r2, r2, r3
 8001540:	0ad2      	lsrs	r2, r2, #11
 8001542:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8001546:	fb01 f202 	mul.w	r2, r1, r2
 800154a:	1a9a      	subs	r2, r3, r2
 800154c:	4b46      	ldr	r3, [pc, #280]	; (8001668 <HAL_RTC_GetTime+0x1a4>)
 800154e:	fba3 1302 	umull	r1, r3, r3, r2
 8001552:	0959      	lsrs	r1, r3, #5
 8001554:	460b      	mov	r3, r1
 8001556:	011b      	lsls	r3, r3, #4
 8001558:	1a5b      	subs	r3, r3, r1
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	1ad1      	subs	r1, r2, r3
 800155e:	b2ca      	uxtb	r2, r1
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	2b17      	cmp	r3, #23
 8001568:	d955      	bls.n	8001616 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	4a3f      	ldr	r2, [pc, #252]	; (800166c <HAL_RTC_GetTime+0x1a8>)
 800156e:	fba2 2303 	umull	r2, r3, r2, r3
 8001572:	091b      	lsrs	r3, r3, #4
 8001574:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8001576:	6939      	ldr	r1, [r7, #16]
 8001578:	4b3c      	ldr	r3, [pc, #240]	; (800166c <HAL_RTC_GetTime+0x1a8>)
 800157a:	fba3 2301 	umull	r2, r3, r3, r1
 800157e:	091a      	lsrs	r2, r3, #4
 8001580:	4613      	mov	r3, r2
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	4413      	add	r3, r2
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	1aca      	subs	r2, r1, r3
 800158a:	b2d2      	uxtb	r2, r2
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001590:	68f8      	ldr	r0, [r7, #12]
 8001592:	f000 f9fd 	bl	8001990 <RTC_ReadAlarmCounter>
 8001596:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800159e:	d008      	beq.n	80015b2 <HAL_RTC_GetTime+0xee>
 80015a0:	69fa      	ldr	r2, [r7, #28]
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d904      	bls.n	80015b2 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 80015a8:	69fa      	ldr	r2, [r7, #28]
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	61fb      	str	r3, [r7, #28]
 80015b0:	e002      	b.n	80015b8 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80015b2:	f04f 33ff 	mov.w	r3, #4294967295
 80015b6:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	4a2d      	ldr	r2, [pc, #180]	; (8001670 <HAL_RTC_GetTime+0x1ac>)
 80015bc:	fb02 f303 	mul.w	r3, r2, r3
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80015c6:	69b9      	ldr	r1, [r7, #24]
 80015c8:	68f8      	ldr	r0, [r7, #12]
 80015ca:	f000 f9ba 	bl	8001942 <RTC_WriteTimeCounter>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e041      	b.n	800165c <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015de:	d00c      	beq.n	80015fa <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 80015e0:	69fa      	ldr	r2, [r7, #28]
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	4413      	add	r3, r2
 80015e6:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80015e8:	69f9      	ldr	r1, [r7, #28]
 80015ea:	68f8      	ldr	r0, [r7, #12]
 80015ec:	f000 f9e9 	bl	80019c2 <RTC_WriteAlarmCounter>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d00a      	beq.n	800160c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e030      	b.n	800165c <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80015fa:	69f9      	ldr	r1, [r7, #28]
 80015fc:	68f8      	ldr	r0, [r7, #12]
 80015fe:	f000 f9e0 	bl	80019c2 <RTC_WriteAlarmCounter>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e027      	b.n	800165c <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 800160c:	6979      	ldr	r1, [r7, #20]
 800160e:	68f8      	ldr	r0, [r7, #12]
 8001610:	f000 fa88 	bl	8001b24 <RTC_DateUpdate>
 8001614:	e003      	b.n	800161e <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	b2da      	uxtb	r2, r3
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d01a      	beq.n	800165a <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	f000 fa41 	bl	8001ab0 <RTC_ByteToBcd2>
 800162e:	4603      	mov	r3, r0
 8001630:	461a      	mov	r2, r3
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	785b      	ldrb	r3, [r3, #1]
 800163a:	4618      	mov	r0, r3
 800163c:	f000 fa38 	bl	8001ab0 <RTC_ByteToBcd2>
 8001640:	4603      	mov	r3, r0
 8001642:	461a      	mov	r2, r3
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	789b      	ldrb	r3, [r3, #2]
 800164c:	4618      	mov	r0, r3
 800164e:	f000 fa2f 	bl	8001ab0 <RTC_ByteToBcd2>
 8001652:	4603      	mov	r3, r0
 8001654:	461a      	mov	r2, r3
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800165a:	2300      	movs	r3, #0
}
 800165c:	4618      	mov	r0, r3
 800165e:	3720      	adds	r7, #32
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	91a2b3c5 	.word	0x91a2b3c5
 8001668:	88888889 	.word	0x88888889
 800166c:	aaaaaaab 	.word	0xaaaaaaab
 8001670:	00015180 	.word	0x00015180

08001674 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b088      	sub	sp, #32
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8001680:	2300      	movs	r3, #0
 8001682:	61fb      	str	r3, [r7, #28]
 8001684:	2300      	movs	r3, #0
 8001686:	61bb      	str	r3, [r7, #24]
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d002      	beq.n	8001698 <HAL_RTC_SetDate+0x24>
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d101      	bne.n	800169c <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e097      	b.n	80017cc <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	7c1b      	ldrb	r3, [r3, #16]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d101      	bne.n	80016a8 <HAL_RTC_SetDate+0x34>
 80016a4:	2302      	movs	r3, #2
 80016a6:	e091      	b.n	80017cc <HAL_RTC_SetDate+0x158>
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2201      	movs	r2, #1
 80016ac:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2202      	movs	r2, #2
 80016b2:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d10c      	bne.n	80016d4 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	78da      	ldrb	r2, [r3, #3]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	785a      	ldrb	r2, [r3, #1]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	789a      	ldrb	r2, [r3, #2]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	739a      	strb	r2, [r3, #14]
 80016d2:	e01a      	b.n	800170a <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	78db      	ldrb	r3, [r3, #3]
 80016d8:	4618      	mov	r0, r3
 80016da:	f000 fa06 	bl	8001aea <RTC_Bcd2ToByte>
 80016de:	4603      	mov	r3, r0
 80016e0:	461a      	mov	r2, r3
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	785b      	ldrb	r3, [r3, #1]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f000 f9fd 	bl	8001aea <RTC_Bcd2ToByte>
 80016f0:	4603      	mov	r3, r0
 80016f2:	461a      	mov	r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	789b      	ldrb	r3, [r3, #2]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f000 f9f4 	bl	8001aea <RTC_Bcd2ToByte>
 8001702:	4603      	mov	r3, r0
 8001704:	461a      	mov	r2, r3
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	7bdb      	ldrb	r3, [r3, #15]
 800170e:	4618      	mov	r0, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	7b59      	ldrb	r1, [r3, #13]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	7b9b      	ldrb	r3, [r3, #14]
 8001718:	461a      	mov	r2, r3
 800171a:	f000 fadf 	bl	8001cdc <RTC_WeekDayNum>
 800171e:	4603      	mov	r3, r0
 8001720:	461a      	mov	r2, r3
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	7b1a      	ldrb	r2, [r3, #12]
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800172e:	68f8      	ldr	r0, [r7, #12]
 8001730:	f000 f8d7 	bl	80018e2 <RTC_ReadTimeCounter>
 8001734:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	4a26      	ldr	r2, [pc, #152]	; (80017d4 <HAL_RTC_SetDate+0x160>)
 800173a:	fba2 2303 	umull	r2, r3, r2, r3
 800173e:	0adb      	lsrs	r3, r3, #11
 8001740:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	2b18      	cmp	r3, #24
 8001746:	d93a      	bls.n	80017be <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	4a23      	ldr	r2, [pc, #140]	; (80017d8 <HAL_RTC_SetDate+0x164>)
 800174c:	fba2 2303 	umull	r2, r3, r2, r3
 8001750:	091b      	lsrs	r3, r3, #4
 8001752:	4a22      	ldr	r2, [pc, #136]	; (80017dc <HAL_RTC_SetDate+0x168>)
 8001754:	fb02 f303 	mul.w	r3, r2, r3
 8001758:	69fa      	ldr	r2, [r7, #28]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800175e:	69f9      	ldr	r1, [r7, #28]
 8001760:	68f8      	ldr	r0, [r7, #12]
 8001762:	f000 f8ee 	bl	8001942 <RTC_WriteTimeCounter>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d007      	beq.n	800177c <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2204      	movs	r2, #4
 8001770:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2200      	movs	r2, #0
 8001776:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e027      	b.n	80017cc <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800177c:	68f8      	ldr	r0, [r7, #12]
 800177e:	f000 f907 	bl	8001990 <RTC_ReadAlarmCounter>
 8001782:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800178a:	d018      	beq.n	80017be <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	429a      	cmp	r2, r3
 8001792:	d214      	bcs.n	80017be <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800179a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800179e:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80017a0:	69b9      	ldr	r1, [r7, #24]
 80017a2:	68f8      	ldr	r0, [r7, #12]
 80017a4:	f000 f90d 	bl	80019c2 <RTC_WriteAlarmCounter>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d007      	beq.n	80017be <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2204      	movs	r2, #4
 80017b2:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2200      	movs	r2, #0
 80017b8:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e006      	b.n	80017cc <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2201      	movs	r2, #1
 80017c2:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2200      	movs	r2, #0
 80017c8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3720      	adds	r7, #32
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	91a2b3c5 	.word	0x91a2b3c5
 80017d8:	aaaaaaab 	.word	0xaaaaaaab
 80017dc:	00015180 	.word	0x00015180

080017e0 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	2100      	movs	r1, #0
 80017f2:	460a      	mov	r2, r1
 80017f4:	801a      	strh	r2, [r3, #0]
 80017f6:	460a      	mov	r2, r1
 80017f8:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d002      	beq.n	8001806 <HAL_RTC_GetDate+0x26>
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e03a      	b.n	8001880 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 800180a:	f107 0314 	add.w	r3, r7, #20
 800180e:	2200      	movs	r2, #0
 8001810:	4619      	mov	r1, r3
 8001812:	68f8      	ldr	r0, [r7, #12]
 8001814:	f7ff fe56 	bl	80014c4 <HAL_RTC_GetTime>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e02e      	b.n	8001880 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	7b1a      	ldrb	r2, [r3, #12]
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	7bda      	ldrb	r2, [r3, #15]
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	7b5a      	ldrb	r2, [r3, #13]
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	7b9a      	ldrb	r2, [r3, #14]
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d01a      	beq.n	800187e <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	78db      	ldrb	r3, [r3, #3]
 800184c:	4618      	mov	r0, r3
 800184e:	f000 f92f 	bl	8001ab0 <RTC_ByteToBcd2>
 8001852:	4603      	mov	r3, r0
 8001854:	461a      	mov	r2, r3
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	785b      	ldrb	r3, [r3, #1]
 800185e:	4618      	mov	r0, r3
 8001860:	f000 f926 	bl	8001ab0 <RTC_ByteToBcd2>
 8001864:	4603      	mov	r3, r0
 8001866:	461a      	mov	r2, r3
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	789b      	ldrb	r3, [r3, #2]
 8001870:	4618      	mov	r0, r3
 8001872:	f000 f91d 	bl	8001ab0 <RTC_ByteToBcd2>
 8001876:	4603      	mov	r3, r0
 8001878:	461a      	mov	r2, r3
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001890:	2300      	movs	r3, #0
 8001892:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d101      	bne.n	800189e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e01d      	b.n	80018da <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	685a      	ldr	r2, [r3, #4]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f022 0208 	bic.w	r2, r2, #8
 80018ac:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80018ae:	f7fe fe65 	bl	800057c <HAL_GetTick>
 80018b2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80018b4:	e009      	b.n	80018ca <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80018b6:	f7fe fe61 	bl	800057c <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018c4:	d901      	bls.n	80018ca <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e007      	b.n	80018da <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f003 0308 	and.w	r3, r3, #8
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d0ee      	beq.n	80018b6 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80018e2:	b480      	push	{r7}
 80018e4:	b087      	sub	sp, #28
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80018ea:	2300      	movs	r3, #0
 80018ec:	827b      	strh	r3, [r7, #18]
 80018ee:	2300      	movs	r3, #0
 80018f0:	823b      	strh	r3, [r7, #16]
 80018f2:	2300      	movs	r3, #0
 80018f4:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80018f6:	2300      	movs	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	69db      	ldr	r3, [r3, #28]
 8001908:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8001912:	8a7a      	ldrh	r2, [r7, #18]
 8001914:	8a3b      	ldrh	r3, [r7, #16]
 8001916:	429a      	cmp	r2, r3
 8001918:	d008      	beq.n	800192c <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800191a:	8a3b      	ldrh	r3, [r7, #16]
 800191c:	041a      	lsls	r2, r3, #16
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	69db      	ldr	r3, [r3, #28]
 8001924:	b29b      	uxth	r3, r3
 8001926:	4313      	orrs	r3, r2
 8001928:	617b      	str	r3, [r7, #20]
 800192a:	e004      	b.n	8001936 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 800192c:	8a7b      	ldrh	r3, [r7, #18]
 800192e:	041a      	lsls	r2, r3, #16
 8001930:	89fb      	ldrh	r3, [r7, #14]
 8001932:	4313      	orrs	r3, r2
 8001934:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8001936:	697b      	ldr	r3, [r7, #20]
}
 8001938:	4618      	mov	r0, r3
 800193a:	371c      	adds	r7, #28
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr

08001942 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b084      	sub	sp, #16
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
 800194a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800194c:	2300      	movs	r3, #0
 800194e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f000 f85d 	bl	8001a10 <RTC_EnterInitMode>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d002      	beq.n	8001962 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	73fb      	strb	r3, [r7, #15]
 8001960:	e011      	b.n	8001986 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	0c12      	lsrs	r2, r2, #16
 800196a:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	b292      	uxth	r2, r2
 8001974:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f000 f872 	bl	8001a60 <RTC_ExitInitMode>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8001986:	7bfb      	ldrb	r3, [r7, #15]
}
 8001988:	4618      	mov	r0, r3
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8001998:	2300      	movs	r3, #0
 800199a:	81fb      	strh	r3, [r7, #14]
 800199c:	2300      	movs	r3, #0
 800199e:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6a1b      	ldr	r3, [r3, #32]
 80019a6:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ae:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80019b0:	89fb      	ldrh	r3, [r7, #14]
 80019b2:	041a      	lsls	r2, r3, #16
 80019b4:	89bb      	ldrh	r3, [r7, #12]
 80019b6:	4313      	orrs	r3, r2
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr

080019c2 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b084      	sub	sp, #16
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
 80019ca:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019cc:	2300      	movs	r3, #0
 80019ce:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f000 f81d 	bl	8001a10 <RTC_EnterInitMode>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d002      	beq.n	80019e2 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	73fb      	strb	r3, [r7, #15]
 80019e0:	e011      	b.n	8001a06 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	0c12      	lsrs	r2, r2, #16
 80019ea:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	b292      	uxth	r2, r2
 80019f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 f832 	bl	8001a60 <RTC_ExitInitMode>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8001a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8001a1c:	f7fe fdae 	bl	800057c <HAL_GetTick>
 8001a20:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001a22:	e009      	b.n	8001a38 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001a24:	f7fe fdaa 	bl	800057c <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a32:	d901      	bls.n	8001a38 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e00f      	b.n	8001a58 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f003 0320 	and.w	r3, r3, #32
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d0ee      	beq.n	8001a24 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f042 0210 	orr.w	r2, r2, #16
 8001a54:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	685a      	ldr	r2, [r3, #4]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f022 0210 	bic.w	r2, r2, #16
 8001a7a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8001a7c:	f7fe fd7e 	bl	800057c <HAL_GetTick>
 8001a80:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001a82:	e009      	b.n	8001a98 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001a84:	f7fe fd7a 	bl	800057c <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a92:	d901      	bls.n	8001a98 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e007      	b.n	8001aa8 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f003 0320 	and.w	r3, r3, #32
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d0ee      	beq.n	8001a84 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8001aba:	2300      	movs	r3, #0
 8001abc:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8001abe:	e005      	b.n	8001acc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	3b0a      	subs	r3, #10
 8001aca:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8001acc:	79fb      	ldrb	r3, [r7, #7]
 8001ace:	2b09      	cmp	r3, #9
 8001ad0:	d8f6      	bhi.n	8001ac0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	011b      	lsls	r3, r3, #4
 8001ad8:	b2da      	uxtb	r2, r3
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	b2db      	uxtb	r3, r3
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc80      	pop	{r7}
 8001ae8:	4770      	bx	lr

08001aea <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b085      	sub	sp, #20
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	4603      	mov	r3, r0
 8001af2:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8001af4:	2300      	movs	r3, #0
 8001af6:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	091b      	lsrs	r3, r3, #4
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	461a      	mov	r2, r3
 8001b00:	4613      	mov	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	f003 030f 	and.w	r3, r3, #15
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	4413      	add	r3, r2
 8001b18:	b2db      	uxtb	r3, r3
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr

08001b24 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	617b      	str	r3, [r7, #20]
 8001b32:	2300      	movs	r3, #0
 8001b34:	613b      	str	r3, [r7, #16]
 8001b36:	2300      	movs	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	7bdb      	ldrb	r3, [r3, #15]
 8001b42:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	7b5b      	ldrb	r3, [r3, #13]
 8001b48:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	7b9b      	ldrb	r3, [r3, #14]
 8001b4e:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8001b50:	2300      	movs	r3, #0
 8001b52:	60bb      	str	r3, [r7, #8]
 8001b54:	e06f      	b.n	8001c36 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d011      	beq.n	8001b80 <RTC_DateUpdate+0x5c>
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	2b03      	cmp	r3, #3
 8001b60:	d00e      	beq.n	8001b80 <RTC_DateUpdate+0x5c>
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	2b05      	cmp	r3, #5
 8001b66:	d00b      	beq.n	8001b80 <RTC_DateUpdate+0x5c>
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	2b07      	cmp	r3, #7
 8001b6c:	d008      	beq.n	8001b80 <RTC_DateUpdate+0x5c>
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	2b08      	cmp	r3, #8
 8001b72:	d005      	beq.n	8001b80 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	2b0a      	cmp	r3, #10
 8001b78:	d002      	beq.n	8001b80 <RTC_DateUpdate+0x5c>
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	2b0c      	cmp	r3, #12
 8001b7e:	d117      	bne.n	8001bb0 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2b1e      	cmp	r3, #30
 8001b84:	d803      	bhi.n	8001b8e <RTC_DateUpdate+0x6a>
      {
        day++;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8001b8c:	e050      	b.n	8001c30 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	2b0c      	cmp	r3, #12
 8001b92:	d005      	beq.n	8001ba0 <RTC_DateUpdate+0x7c>
        {
          month++;
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	3301      	adds	r3, #1
 8001b98:	613b      	str	r3, [r7, #16]
          day = 1U;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8001b9e:	e047      	b.n	8001c30 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	613b      	str	r3, [r7, #16]
          day = 1U;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	60fb      	str	r3, [r7, #12]
          year++;
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	3301      	adds	r3, #1
 8001bac:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8001bae:	e03f      	b.n	8001c30 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	d008      	beq.n	8001bc8 <RTC_DateUpdate+0xa4>
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	2b06      	cmp	r3, #6
 8001bba:	d005      	beq.n	8001bc8 <RTC_DateUpdate+0xa4>
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	2b09      	cmp	r3, #9
 8001bc0:	d002      	beq.n	8001bc8 <RTC_DateUpdate+0xa4>
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	2b0b      	cmp	r3, #11
 8001bc6:	d10c      	bne.n	8001be2 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2b1d      	cmp	r3, #29
 8001bcc:	d803      	bhi.n	8001bd6 <RTC_DateUpdate+0xb2>
      {
        day++;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8001bd4:	e02c      	b.n	8001c30 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	613b      	str	r3, [r7, #16]
        day = 1U;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8001be0:	e026      	b.n	8001c30 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d123      	bne.n	8001c30 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2b1b      	cmp	r3, #27
 8001bec:	d803      	bhi.n	8001bf6 <RTC_DateUpdate+0xd2>
      {
        day++;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	e01c      	b.n	8001c30 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2b1c      	cmp	r3, #28
 8001bfa:	d111      	bne.n	8001c20 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	4618      	mov	r0, r3
 8001c02:	f000 f839 	bl	8001c78 <RTC_IsLeapYear>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d003      	beq.n	8001c14 <RTC_DateUpdate+0xf0>
        {
          day++;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	e00d      	b.n	8001c30 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	3301      	adds	r3, #1
 8001c18:	613b      	str	r3, [r7, #16]
          day = 1U;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	e007      	b.n	8001c30 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2b1d      	cmp	r3, #29
 8001c24:	d104      	bne.n	8001c30 <RTC_DateUpdate+0x10c>
      {
        month++;
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	613b      	str	r3, [r7, #16]
        day = 1U;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	3301      	adds	r3, #1
 8001c34:	60bb      	str	r3, [r7, #8]
 8001c36:	68ba      	ldr	r2, [r7, #8]
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d38b      	bcc.n	8001b56 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	b2da      	uxtb	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	b2d2      	uxtb	r2, r2
 8001c5e:	4619      	mov	r1, r3
 8001c60:	6978      	ldr	r0, [r7, #20]
 8001c62:	f000 f83b 	bl	8001cdc <RTC_WeekDayNum>
 8001c66:	4603      	mov	r3, r0
 8001c68:	461a      	mov	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	731a      	strb	r2, [r3, #12]
}
 8001c6e:	bf00      	nop
 8001c70:	3718      	adds	r7, #24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
	...

08001c78 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8001c82:	88fb      	ldrh	r3, [r7, #6]
 8001c84:	f003 0303 	and.w	r3, r3, #3
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	e01d      	b.n	8001cce <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8001c92:	88fb      	ldrh	r3, [r7, #6]
 8001c94:	4a10      	ldr	r2, [pc, #64]	; (8001cd8 <RTC_IsLeapYear+0x60>)
 8001c96:	fba2 1203 	umull	r1, r2, r2, r3
 8001c9a:	0952      	lsrs	r2, r2, #5
 8001c9c:	2164      	movs	r1, #100	; 0x64
 8001c9e:	fb01 f202 	mul.w	r2, r1, r2
 8001ca2:	1a9b      	subs	r3, r3, r2
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e00f      	b.n	8001cce <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8001cae:	88fb      	ldrh	r3, [r7, #6]
 8001cb0:	4a09      	ldr	r2, [pc, #36]	; (8001cd8 <RTC_IsLeapYear+0x60>)
 8001cb2:	fba2 1203 	umull	r1, r2, r2, r3
 8001cb6:	09d2      	lsrs	r2, r2, #7
 8001cb8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001cbc:	fb01 f202 	mul.w	r2, r1, r2
 8001cc0:	1a9b      	subs	r3, r3, r2
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d101      	bne.n	8001ccc <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e000      	b.n	8001cce <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8001ccc:	2300      	movs	r3, #0
  }
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr
 8001cd8:	51eb851f 	.word	0x51eb851f

08001cdc <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	70fb      	strb	r3, [r7, #3]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8001cec:	2300      	movs	r3, #0
 8001cee:	60bb      	str	r3, [r7, #8]
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001cfa:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8001cfc:	78fb      	ldrb	r3, [r7, #3]
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d82d      	bhi.n	8001d5e <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8001d02:	78fa      	ldrb	r2, [r7, #3]
 8001d04:	4613      	mov	r3, r2
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	4413      	add	r3, r2
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	1a9b      	subs	r3, r3, r2
 8001d0e:	4a2c      	ldr	r2, [pc, #176]	; (8001dc0 <RTC_WeekDayNum+0xe4>)
 8001d10:	fba2 2303 	umull	r2, r3, r2, r3
 8001d14:	085a      	lsrs	r2, r3, #1
 8001d16:	78bb      	ldrb	r3, [r7, #2]
 8001d18:	441a      	add	r2, r3
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	441a      	add	r2, r3
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	3b01      	subs	r3, #1
 8001d22:	089b      	lsrs	r3, r3, #2
 8001d24:	441a      	add	r2, r3
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	4926      	ldr	r1, [pc, #152]	; (8001dc4 <RTC_WeekDayNum+0xe8>)
 8001d2c:	fba1 1303 	umull	r1, r3, r1, r3
 8001d30:	095b      	lsrs	r3, r3, #5
 8001d32:	1ad2      	subs	r2, r2, r3
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	3b01      	subs	r3, #1
 8001d38:	4922      	ldr	r1, [pc, #136]	; (8001dc4 <RTC_WeekDayNum+0xe8>)
 8001d3a:	fba1 1303 	umull	r1, r3, r1, r3
 8001d3e:	09db      	lsrs	r3, r3, #7
 8001d40:	4413      	add	r3, r2
 8001d42:	1d1a      	adds	r2, r3, #4
 8001d44:	4b20      	ldr	r3, [pc, #128]	; (8001dc8 <RTC_WeekDayNum+0xec>)
 8001d46:	fba3 1302 	umull	r1, r3, r3, r2
 8001d4a:	1ad1      	subs	r1, r2, r3
 8001d4c:	0849      	lsrs	r1, r1, #1
 8001d4e:	440b      	add	r3, r1
 8001d50:	0899      	lsrs	r1, r3, #2
 8001d52:	460b      	mov	r3, r1
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	1a5b      	subs	r3, r3, r1
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	e029      	b.n	8001db2 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8001d5e:	78fa      	ldrb	r2, [r7, #3]
 8001d60:	4613      	mov	r3, r2
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	4413      	add	r3, r2
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	1a9b      	subs	r3, r3, r2
 8001d6a:	4a15      	ldr	r2, [pc, #84]	; (8001dc0 <RTC_WeekDayNum+0xe4>)
 8001d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d70:	085a      	lsrs	r2, r3, #1
 8001d72:	78bb      	ldrb	r3, [r7, #2]
 8001d74:	441a      	add	r2, r3
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	441a      	add	r2, r3
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	089b      	lsrs	r3, r3, #2
 8001d7e:	441a      	add	r2, r3
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	4910      	ldr	r1, [pc, #64]	; (8001dc4 <RTC_WeekDayNum+0xe8>)
 8001d84:	fba1 1303 	umull	r1, r3, r1, r3
 8001d88:	095b      	lsrs	r3, r3, #5
 8001d8a:	1ad2      	subs	r2, r2, r3
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	490d      	ldr	r1, [pc, #52]	; (8001dc4 <RTC_WeekDayNum+0xe8>)
 8001d90:	fba1 1303 	umull	r1, r3, r1, r3
 8001d94:	09db      	lsrs	r3, r3, #7
 8001d96:	4413      	add	r3, r2
 8001d98:	1c9a      	adds	r2, r3, #2
 8001d9a:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <RTC_WeekDayNum+0xec>)
 8001d9c:	fba3 1302 	umull	r1, r3, r3, r2
 8001da0:	1ad1      	subs	r1, r2, r3
 8001da2:	0849      	lsrs	r1, r1, #1
 8001da4:	440b      	add	r3, r1
 8001da6:	0899      	lsrs	r1, r3, #2
 8001da8:	460b      	mov	r3, r1
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	1a5b      	subs	r3, r3, r1
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	b2db      	uxtb	r3, r3
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3714      	adds	r7, #20
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bc80      	pop	{r7}
 8001dbe:	4770      	bx	lr
 8001dc0:	38e38e39 	.word	0x38e38e39
 8001dc4:	51eb851f 	.word	0x51eb851f
 8001dc8:	24924925 	.word	0x24924925

08001dcc <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b087      	sub	sp, #28
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 8001ddc:	4b07      	ldr	r3, [pc, #28]	; (8001dfc <HAL_RTCEx_BKUPWrite+0x30>)
 8001dde:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	4413      	add	r3, r2
 8001de8:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	b292      	uxth	r2, r2
 8001df0:	601a      	str	r2, [r3, #0]
}
 8001df2:	bf00      	nop
 8001df4:	371c      	adds	r7, #28
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	4770      	bx	lr
 8001dfc:	40006c00 	.word	0x40006c00

08001e00 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
 8001e12:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <HAL_RTCEx_BKUPRead+0x34>)
 8001e14:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	60fb      	str	r3, [r7, #12]

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 8001e28:	68bb      	ldr	r3, [r7, #8]
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3714      	adds	r7, #20
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr
 8001e34:	40006c00 	.word	0x40006c00

08001e38 <__libc_init_array>:
 8001e38:	b570      	push	{r4, r5, r6, lr}
 8001e3a:	2600      	movs	r6, #0
 8001e3c:	4d0c      	ldr	r5, [pc, #48]	; (8001e70 <__libc_init_array+0x38>)
 8001e3e:	4c0d      	ldr	r4, [pc, #52]	; (8001e74 <__libc_init_array+0x3c>)
 8001e40:	1b64      	subs	r4, r4, r5
 8001e42:	10a4      	asrs	r4, r4, #2
 8001e44:	42a6      	cmp	r6, r4
 8001e46:	d109      	bne.n	8001e5c <__libc_init_array+0x24>
 8001e48:	f000 f822 	bl	8001e90 <_init>
 8001e4c:	2600      	movs	r6, #0
 8001e4e:	4d0a      	ldr	r5, [pc, #40]	; (8001e78 <__libc_init_array+0x40>)
 8001e50:	4c0a      	ldr	r4, [pc, #40]	; (8001e7c <__libc_init_array+0x44>)
 8001e52:	1b64      	subs	r4, r4, r5
 8001e54:	10a4      	asrs	r4, r4, #2
 8001e56:	42a6      	cmp	r6, r4
 8001e58:	d105      	bne.n	8001e66 <__libc_init_array+0x2e>
 8001e5a:	bd70      	pop	{r4, r5, r6, pc}
 8001e5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e60:	4798      	blx	r3
 8001e62:	3601      	adds	r6, #1
 8001e64:	e7ee      	b.n	8001e44 <__libc_init_array+0xc>
 8001e66:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e6a:	4798      	blx	r3
 8001e6c:	3601      	adds	r6, #1
 8001e6e:	e7f2      	b.n	8001e56 <__libc_init_array+0x1e>
 8001e70:	08001ee0 	.word	0x08001ee0
 8001e74:	08001ee0 	.word	0x08001ee0
 8001e78:	08001ee0 	.word	0x08001ee0
 8001e7c:	08001ee4 	.word	0x08001ee4

08001e80 <memset>:
 8001e80:	4603      	mov	r3, r0
 8001e82:	4402      	add	r2, r0
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d100      	bne.n	8001e8a <memset+0xa>
 8001e88:	4770      	bx	lr
 8001e8a:	f803 1b01 	strb.w	r1, [r3], #1
 8001e8e:	e7f9      	b.n	8001e84 <memset+0x4>

08001e90 <_init>:
 8001e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e92:	bf00      	nop
 8001e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e96:	bc08      	pop	{r3}
 8001e98:	469e      	mov	lr, r3
 8001e9a:	4770      	bx	lr

08001e9c <_fini>:
 8001e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e9e:	bf00      	nop
 8001ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ea2:	bc08      	pop	{r3}
 8001ea4:	469e      	mov	lr, r3
 8001ea6:	4770      	bx	lr
